{
	"id": 0,
	"name": "JSLib Reference Manual",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 416,
			"name": "Channel",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isAbstract": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Channel Class\n\nJoin a channel, returns channel object.\n\nCurrently, you must have an identity when connecting, because every single\nmessage is signed by sender. TODO is to look at how to provide a 'listening'\nmode on channels.\n\nMost classes in SB follow the \"ready\" template: objects can be used\nright away, but they decide for themselves if they're ready or not."
					}
				]
			},
			"children": [
				{
					"id": 417,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 418,
							"name": "new Channel",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 419,
									"name": "sbServer",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 82,
										"name": "SBServer",
										"package": "snackabra"
									}
								},
								{
									"id": 420,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								},
								{
									"id": 421,
									"name": "channelId",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 416,
								"name": "Channel",
								"package": "snackabra"
							},
							"overwrites": {
								"type": "reference",
								"target": 693,
								"name": "SB384.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": 692,
						"name": "SB384.constructor"
					}
				},
				{
					"id": 428,
					"name": "admin",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 444,
					"name": "adminData",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true,
						"isAbstract": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "Dictionary"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Dictionary",
						"package": "snackabra"
					}
				},
				{
					"id": 422,
					"name": "channelReady",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@param",
								"name": "Snackabra",
								"content": [
									{
										"kind": "text",
										"text": "server to join"
									}
								]
							},
							{
								"tag": "@param",
								"name": "JsonWebKey",
								"content": [
									{
										"kind": "text",
										"text": "key to use to join (optional)"
									}
								]
							},
							{
								"tag": "@param",
								"name": "string",
								"content": [
									{
										"kind": "text",
										"text": "the <a href=\"../glossary.html#term-channel-name\">Channel Name</a> to find on that server (optional)"
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 416,
								"name": "Channel",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					}
				},
				{
					"id": 426,
					"name": "locked",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 425,
					"name": "motd",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "''"
				},
				{
					"id": 427,
					"name": "owner",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 460,
					"name": "ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 691,
								"name": "SB384",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 695,
						"name": "SB384.ready"
					}
				},
				{
					"id": 461,
					"name": "sb384Ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 691,
								"name": "SB384",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 696,
						"name": "SB384.sb384Ready"
					}
				},
				{
					"id": 430,
					"name": "userName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "''"
				},
				{
					"id": 429,
					"name": "verifiedGuest",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 473,
					"name": "_id",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 474,
						"name": "_id",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384._id"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 710,
						"name": "SB384._id"
					}
				},
				{
					"id": 454,
					"name": "api",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 455,
						"name": "api",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 477,
							"name": "ChannelApi",
							"package": "snackabra"
						}
					}
				},
				{
					"id": 456,
					"name": "channelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 457,
						"name": "channelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "undefined"
								},
								{
									"type": "intrinsic",
									"name": "string"
								}
							]
						}
					}
				},
				{
					"id": 458,
					"name": "channelSignKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 459,
						"name": "channelSignKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						}
					}
				},
				{
					"id": 469,
					"name": "exportable_privateKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 470,
						"name": "exportable_privateKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.exportable_privateKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 706,
						"name": "SB384.exportable_privateKey"
					}
				},
				{
					"id": 467,
					"name": "exportable_pubKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 468,
						"name": "exportable_pubKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.exportable_pubKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 704,
						"name": "SB384.exportable_pubKey"
					}
				},
				{
					"id": 448,
					"name": "keys",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 449,
						"name": "keys",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 116,
							"name": "ChannelKeys",
							"package": "snackabra"
						}
					}
				},
				{
					"id": 475,
					"name": "ownerChannelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 476,
						"name": "ownerChannelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.ownerChannelId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 712,
						"name": "SB384.ownerChannelId"
					}
				},
				{
					"id": 471,
					"name": "privateKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 472,
						"name": "privateKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.privateKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 708,
						"name": "SB384.privateKey"
					}
				},
				{
					"id": 452,
					"name": "readyFlag",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 453,
						"name": "readyFlag",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						},
						"overwrites": {
							"type": "reference",
							"target": -1,
							"name": "SB384.readyFlag"
						}
					},
					"overwrites": {
						"type": "reference",
						"target": 702,
						"name": "SB384.readyFlag"
					}
				},
				{
					"id": 450,
					"name": "sbServer",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 451,
						"name": "sbServer",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 82,
							"name": "SBServer",
							"package": "snackabra"
						}
					}
				},
				{
					"id": 445,
					"name": "importKeys",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 446,
							"name": "importKeys",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 447,
									"name": "keyStrings",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 409,
										"name": "ChannelKeyStrings",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 439,
					"name": "send",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 440,
							"name": "send",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 441,
									"name": "m",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 551,
												"name": "SBMessage",
												"package": "snackabra"
											}
										]
									}
								},
								{
									"id": 442,
									"name": "messageType",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "string"
											},
											{
												"type": "literal",
												"value": "SBMessage"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						417
					]
				},
				{
					"title": "Properties",
					"children": [
						428,
						444,
						422,
						426,
						425,
						427,
						460,
						461,
						430,
						429
					]
				},
				{
					"title": "Accessors",
					"children": [
						473,
						454,
						456,
						458,
						469,
						467,
						448,
						475,
						471,
						452,
						450
					]
				},
				{
					"title": "Methods",
					"children": [
						445,
						439
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 691,
					"name": "SB384",
					"package": "snackabra"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 158,
					"name": "ChannelEndpoint"
				},
				{
					"type": "reference",
					"target": 222,
					"name": "ChannelSocket"
				}
			]
		},
		{
			"id": 477,
			"name": "ChannelApi",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isPublic": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Channel API\n\nRequires a Channel object to initialize. That can be a ChannelSocket, for\nexample, or if you just need access to send commands to the channel you\ncan use ChannelEndpoint (since \"Channel\" is an abstract class)"
					}
				]
			},
			"children": [
				{
					"id": 478,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 479,
							"name": "new ChannelApi",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 480,
									"name": "channel",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 416,
										"name": "Channel",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 477,
								"name": "ChannelApi",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 499,
					"name": "channelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 500,
						"name": "channelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "undefined"
								},
								{
									"type": "intrinsic",
									"name": "string"
								}
							]
						}
					}
				},
				{
					"id": 538,
					"name": "acceptVisitor",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 539,
							"name": "acceptVisitor",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 540,
									"name": "pubKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 524,
					"name": "authorize",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 525,
							"name": "authorize",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 526,
									"name": "ownerPublicKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "snackabra-jslib/snackabra.ts",
											"qualifiedName": "Dictionary"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"package": "snackabra"
									}
								},
								{
									"id": 527,
									"name": "serverSecret",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 543,
					"name": "budd",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 544,
							"name": "budd",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "\"budd\" will spin a channel off an existing one.\nYou need to provide one of the following combinations of info:\n\n- nothing (special case, create new channel and transfer all storage budget)\n- just storage amount (creates new channel with that amount)\n- just a target channel (moves all storage budget to that channel)\n- just keys (creates new channel with those keys and transfers all storage budget)\n- keys and storage amount (creates new channel with those keys and that storage amount)\n\nIn the first (special) case you can just call budd(), in the other\ncases you need to fill out the options object.\n\nAnother way to remember the above: all combinations are valid except\nboth a target channel and assigning keys.\n\nNote: if you're specifying the target channel, then the return values will\nnot include the private key (that return value will be empty)."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 79,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 545,
							"name": "budd",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 546,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 547,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 548,
													"name": "keys",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
															"qualifiedName": "JsonWebKey"
														},
														"name": "JsonWebKey",
														"package": "typescript"
													}
												},
												{
													"id": 549,
													"name": "storage",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 550,
													"name": "targetChannel",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														548,
														549,
														550
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 79,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 519,
					"name": "downloadData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 520,
							"name": "downloadData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "downloadData"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 517,
					"name": "getAdminData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 518,
							"name": "getAdminData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "getAdminData"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 125,
										"name": "ChannelAdminData",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 504,
					"name": "getCapacity",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 505,
							"name": "getCapacity",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "getCapacity"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 510,
					"name": "getJoinRequests",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 511,
							"name": "getJoinRequests",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "getJoinRequests"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 487,
					"name": "getLastMessageTimes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 488,
							"name": "getLastMessageTimes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "getLastMessageTimes"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 508,
					"name": "getMother",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 509,
							"name": "getMother",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "getMother\n\nGet the channelID from which this channel was budded. Note that\nthis is only accessible by Owner (as well as hosting server)"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 489,
					"name": "getOldMessages",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 490,
							"name": "getOldMessages",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "getOldMessages\n\nWill return most recent messages from the channel."
									}
								]
							},
							"parameters": [
								{
									"id": 491,
									"name": "currentMessagesLength",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "number to fetch (default 100)"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "100"
								},
								{
									"id": 492,
									"name": "paginate",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "if true, will paginate from last request (default false)\n\nTODO: this needs to be able to check that the channel socket\n      is ready, otherwise the keys might not be ... currently\n      before calling this, make a ready check on the socket"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 88,
											"name": "ChannelMessage",
											"package": "snackabra"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 506,
					"name": "getStorageLimit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 507,
							"name": "getStorageLimit",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "getStorageLimit (current storage budget)"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 512,
					"name": "isLocked",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 513,
							"name": "isLocked",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "isLocked"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 536,
					"name": "lock",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 537,
							"name": "lock",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 541,
					"name": "ownerKeyRotation",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 542,
							"name": "ownerKeyRotation",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 528,
					"name": "postPubKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 529,
							"name": "postPubKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 530,
									"name": "_exportable_pubKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 531,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 532,
													"name": "success",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														532
													]
												}
											]
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 514,
					"name": "setMOTD",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 515,
							"name": "setMOTD",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Set message of the day"
									}
								]
							},
							"parameters": [
								{
									"id": 516,
									"name": "motd",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 533,
					"name": "storageRequest",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 534,
							"name": "storageRequest",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 535,
									"name": "byteLength",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "snackabra-jslib/snackabra.ts",
											"qualifiedName": "Dictionary"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 501,
					"name": "updateCapacity",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 502,
							"name": "updateCapacity",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update (set) the capacity of the channel; Owner only"
									}
								]
							},
							"parameters": [
								{
									"id": 503,
									"name": "capacity",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 521,
					"name": "uploadChannel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 522,
							"name": "uploadChannel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 523,
									"name": "channelData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 400,
										"name": "ChannelData",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						478
					]
				},
				{
					"title": "Accessors",
					"children": [
						499
					]
				},
				{
					"title": "Methods",
					"children": [
						538,
						524,
						543,
						519,
						517,
						504,
						510,
						487,
						508,
						489,
						506,
						512,
						536,
						541,
						528,
						514,
						533,
						501,
						521
					]
				}
			]
		},
		{
			"id": 158,
			"name": "ChannelEndpoint",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "ChannelEndpoint\n\nGives access to a Channel API (without needing to connect to socket)"
					}
				]
			},
			"children": [
				{
					"id": 159,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 160,
							"name": "new ChannelEndpoint",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 161,
									"name": "sbServer",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 82,
										"name": "SBServer",
										"package": "snackabra"
									}
								},
								{
									"id": 162,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								},
								{
									"id": 163,
									"name": "channelId",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 158,
								"name": "ChannelEndpoint",
								"package": "snackabra"
							},
							"overwrites": {
								"type": "reference",
								"target": 418,
								"name": "Channel.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": 417,
						"name": "Channel.constructor"
					}
				},
				{
					"id": 178,
					"name": "admin",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false",
					"inheritedFrom": {
						"type": "reference",
						"target": 428,
						"name": "Channel.admin"
					}
				},
				{
					"id": 164,
					"name": "adminData",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "Dictionary"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Dictionary",
						"package": "snackabra"
					},
					"overwrites": {
						"type": "reference",
						"target": 444,
						"name": "Channel.adminData"
					}
				},
				{
					"id": 172,
					"name": "channelReady",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@param",
								"name": "Snackabra",
								"content": [
									{
										"kind": "text",
										"text": "server to join"
									}
								]
							},
							{
								"tag": "@param",
								"name": "JsonWebKey",
								"content": [
									{
										"kind": "text",
										"text": "key to use to join (optional)"
									}
								]
							},
							{
								"tag": "@param",
								"name": "string",
								"content": [
									{
										"kind": "text",
										"text": "the <a href=\"../glossary.html#term-channel-name\">Channel Name</a> to find on that server (optional)"
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 416,
								"name": "Channel",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 422,
						"name": "Channel.channelReady"
					}
				},
				{
					"id": 176,
					"name": "locked",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false",
					"inheritedFrom": {
						"type": "reference",
						"target": 426,
						"name": "Channel.locked"
					}
				},
				{
					"id": 175,
					"name": "motd",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "''",
					"inheritedFrom": {
						"type": "reference",
						"target": 425,
						"name": "Channel.motd"
					}
				},
				{
					"id": 177,
					"name": "owner",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false",
					"inheritedFrom": {
						"type": "reference",
						"target": 427,
						"name": "Channel.owner"
					}
				},
				{
					"id": 205,
					"name": "ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 691,
								"name": "SB384",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 460,
						"name": "Channel.ready"
					}
				},
				{
					"id": 206,
					"name": "sb384Ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 691,
								"name": "SB384",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 461,
						"name": "Channel.sb384Ready"
					}
				},
				{
					"id": 180,
					"name": "userName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "''",
					"inheritedFrom": {
						"type": "reference",
						"target": 430,
						"name": "Channel.userName"
					}
				},
				{
					"id": 179,
					"name": "verifiedGuest",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false",
					"inheritedFrom": {
						"type": "reference",
						"target": 429,
						"name": "Channel.verifiedGuest"
					}
				},
				{
					"id": 218,
					"name": "_id",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 219,
						"name": "_id",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel._id"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 473,
						"name": "Channel._id"
					}
				},
				{
					"id": 199,
					"name": "api",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 200,
						"name": "api",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 477,
							"name": "ChannelApi",
							"package": "snackabra"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.api"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 454,
						"name": "Channel.api"
					}
				},
				{
					"id": 201,
					"name": "channelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 202,
						"name": "channelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "undefined"
								},
								{
									"type": "intrinsic",
									"name": "string"
								}
							]
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.channelId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 456,
						"name": "Channel.channelId"
					}
				},
				{
					"id": 203,
					"name": "channelSignKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 204,
						"name": "channelSignKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.channelSignKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 458,
						"name": "Channel.channelSignKey"
					}
				},
				{
					"id": 214,
					"name": "exportable_privateKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 215,
						"name": "exportable_privateKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.exportable_privateKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 469,
						"name": "Channel.exportable_privateKey"
					}
				},
				{
					"id": 212,
					"name": "exportable_pubKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 213,
						"name": "exportable_pubKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.exportable_pubKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 467,
						"name": "Channel.exportable_pubKey"
					}
				},
				{
					"id": 193,
					"name": "keys",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 194,
						"name": "keys",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 116,
							"name": "ChannelKeys",
							"package": "snackabra"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.keys"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 448,
						"name": "Channel.keys"
					}
				},
				{
					"id": 169,
					"name": "onMessage",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"setSignature": {
						"id": 170,
						"name": "onMessage",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"parameters": [
							{
								"id": 171,
								"name": "_f",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "CallableFunction"
									},
									"name": "CallableFunction",
									"package": "typescript"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						}
					}
				},
				{
					"id": 220,
					"name": "ownerChannelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 221,
						"name": "ownerChannelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.ownerChannelId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 475,
						"name": "Channel.ownerChannelId"
					}
				},
				{
					"id": 216,
					"name": "privateKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 217,
						"name": "privateKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.privateKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 471,
						"name": "Channel.privateKey"
					}
				},
				{
					"id": 197,
					"name": "readyFlag",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 198,
						"name": "readyFlag",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.readyFlag"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 452,
						"name": "Channel.readyFlag"
					}
				},
				{
					"id": 195,
					"name": "sbServer",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 196,
						"name": "sbServer",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 82,
							"name": "SBServer",
							"package": "snackabra"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.sbServer"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 450,
						"name": "Channel.sbServer"
					}
				},
				{
					"id": 190,
					"name": "importKeys",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 191,
							"name": "importKeys",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 192,
									"name": "keyStrings",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 409,
										"name": "ChannelKeyStrings",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 446,
								"name": "Channel.importKeys"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 445,
						"name": "Channel.importKeys"
					}
				},
				{
					"id": 165,
					"name": "send",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 166,
							"name": "send",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 167,
									"name": "_m",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 551,
												"name": "SBMessage",
												"package": "snackabra"
											}
										]
									}
								},
								{
									"id": 168,
									"name": "_messageType",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "string"
											},
											{
												"type": "literal",
												"value": "SBMessage"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": 440,
								"name": "Channel.send"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": 439,
						"name": "Channel.send"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						159
					]
				},
				{
					"title": "Properties",
					"children": [
						178,
						164,
						172,
						176,
						175,
						177,
						205,
						206,
						180,
						179
					]
				},
				{
					"title": "Accessors",
					"children": [
						218,
						199,
						201,
						203,
						214,
						212,
						193,
						169,
						220,
						216,
						197,
						195
					]
				},
				{
					"title": "Methods",
					"children": [
						190,
						165
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 416,
					"name": "Channel",
					"package": "snackabra"
				}
			]
		},
		{
			"id": 222,
			"name": "ChannelSocket",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "ChannelSocket\n\n Class managing connections"
					}
				]
			},
			"children": [
				{
					"id": 223,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 224,
							"name": "new ChannelSocket",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "ChannelSocket"
									}
								]
							},
							"parameters": [
								{
									"id": 225,
									"name": "sbServer",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 82,
										"name": "SBServer",
										"package": "snackabra"
									}
								},
								{
									"id": 226,
									"name": "onMessage",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 227,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 228,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"parameters": [
														{
															"id": 229,
															"name": "m",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": 88,
																"name": "ChannelMessage",
																"package": "snackabra"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 230,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								},
								{
									"id": 231,
									"name": "channelId",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 222,
								"name": "ChannelSocket",
								"package": "snackabra"
							},
							"overwrites": {
								"type": "reference",
								"target": 418,
								"name": "Channel.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": 417,
						"name": "Channel.constructor"
					}
				},
				{
					"id": 285,
					"name": "admin",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false",
					"inheritedFrom": {
						"type": "reference",
						"target": 428,
						"name": "Channel.admin"
					}
				},
				{
					"id": 237,
					"name": "adminData",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 125,
						"name": "ChannelAdminData",
						"package": "snackabra"
					},
					"overwrites": {
						"type": "reference",
						"target": 444,
						"name": "Channel.adminData"
					}
				},
				{
					"id": 279,
					"name": "channelReady",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@param",
								"name": "Snackabra",
								"content": [
									{
										"kind": "text",
										"text": "server to join"
									}
								]
							},
							{
								"tag": "@param",
								"name": "JsonWebKey",
								"content": [
									{
										"kind": "text",
										"text": "key to use to join (optional)"
									}
								]
							},
							{
								"tag": "@param",
								"name": "string",
								"content": [
									{
										"kind": "text",
										"text": "the <a href=\"../glossary.html#term-channel-name\">Channel Name</a> to find on that server (optional)"
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 416,
								"name": "Channel",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 422,
						"name": "Channel.channelReady"
					}
				},
				{
					"id": 283,
					"name": "locked",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false",
					"inheritedFrom": {
						"type": "reference",
						"target": 426,
						"name": "Channel.locked"
					}
				},
				{
					"id": 282,
					"name": "motd",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "''",
					"inheritedFrom": {
						"type": "reference",
						"target": 425,
						"name": "Channel.motd"
					}
				},
				{
					"id": 284,
					"name": "owner",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false",
					"inheritedFrom": {
						"type": "reference",
						"target": 427,
						"name": "Channel.owner"
					}
				},
				{
					"id": 232,
					"name": "ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 222,
								"name": "ChannelSocket",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"overwrites": {
						"type": "reference",
						"target": 460,
						"name": "Channel.ready"
					}
				},
				{
					"id": 312,
					"name": "sb384Ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 691,
								"name": "SB384",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 461,
						"name": "Channel.sb384Ready"
					}
				},
				{
					"id": 287,
					"name": "userName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "''",
					"inheritedFrom": {
						"type": "reference",
						"target": 430,
						"name": "Channel.userName"
					}
				},
				{
					"id": 286,
					"name": "verifiedGuest",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false",
					"inheritedFrom": {
						"type": "reference",
						"target": 429,
						"name": "Channel.verifiedGuest"
					}
				},
				{
					"id": 324,
					"name": "_id",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 325,
						"name": "_id",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel._id"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 473,
						"name": "Channel._id"
					}
				},
				{
					"id": 306,
					"name": "api",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 307,
						"name": "api",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 477,
							"name": "ChannelApi",
							"package": "snackabra"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.api"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 454,
						"name": "Channel.api"
					}
				},
				{
					"id": 308,
					"name": "channelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 309,
						"name": "channelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "undefined"
								},
								{
									"type": "intrinsic",
									"name": "string"
								}
							]
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.channelId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 456,
						"name": "Channel.channelId"
					}
				},
				{
					"id": 310,
					"name": "channelSignKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 311,
						"name": "channelSignKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.channelSignKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 458,
						"name": "Channel.channelSignKey"
					}
				},
				{
					"id": 271,
					"name": "enableTrace",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"setSignature": {
						"id": 272,
						"name": "enableTrace",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"parameters": [
							{
								"id": 273,
								"name": "b",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "boolean"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						}
					}
				},
				{
					"id": 277,
					"name": "exportable_owner_pubKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 278,
						"name": "exportable_owner_pubKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": null
								},
								{
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
										"qualifiedName": "JsonWebKey"
									},
									"name": "JsonWebKey",
									"package": "typescript"
								}
							]
						}
					}
				},
				{
					"id": 320,
					"name": "exportable_privateKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 321,
						"name": "exportable_privateKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.exportable_privateKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 469,
						"name": "Channel.exportable_privateKey"
					}
				},
				{
					"id": 318,
					"name": "exportable_pubKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 319,
						"name": "exportable_pubKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.exportable_pubKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 467,
						"name": "Channel.exportable_pubKey"
					}
				},
				{
					"id": 300,
					"name": "keys",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 301,
						"name": "keys",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 116,
							"name": "ChannelKeys",
							"package": "snackabra"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.keys"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 448,
						"name": "Channel.keys"
					}
				},
				{
					"id": 261,
					"name": "onMessage",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 262,
						"name": "onMessage",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reflection",
							"declaration": {
								"id": 263,
								"name": "__type",
								"variant": "declaration",
								"kind": 65536,
								"flags": {},
								"signatures": [
									{
										"id": 264,
										"name": "__type",
										"variant": "signature",
										"kind": 4096,
										"flags": {},
										"parameters": [
											{
												"id": 265,
												"name": "m",
												"variant": "param",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "reference",
													"target": 88,
													"name": "ChannelMessage",
													"package": "snackabra"
												}
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "void"
										}
									}
								]
							}
						}
					},
					"setSignature": {
						"id": 266,
						"name": "onMessage",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"parameters": [
							{
								"id": 267,
								"name": "f",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "reflection",
									"declaration": {
										"id": 268,
										"name": "__type",
										"variant": "declaration",
										"kind": 65536,
										"flags": {},
										"signatures": [
											{
												"id": 269,
												"name": "__type",
												"variant": "signature",
												"kind": 4096,
												"flags": {},
												"parameters": [
													{
														"id": 270,
														"name": "m",
														"variant": "param",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "reference",
															"target": 88,
															"name": "ChannelMessage",
															"package": "snackabra"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "void"
												}
											}
										]
									}
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						}
					}
				},
				{
					"id": 326,
					"name": "ownerChannelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 327,
						"name": "ownerChannelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.ownerChannelId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 475,
						"name": "Channel.ownerChannelId"
					}
				},
				{
					"id": 322,
					"name": "privateKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 323,
						"name": "privateKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.privateKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 471,
						"name": "Channel.privateKey"
					}
				},
				{
					"id": 304,
					"name": "readyFlag",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 305,
						"name": "readyFlag",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.readyFlag"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 452,
						"name": "Channel.readyFlag"
					}
				},
				{
					"id": 302,
					"name": "sbServer",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 303,
						"name": "sbServer",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 82,
							"name": "SBServer",
							"package": "snackabra"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.sbServer"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 450,
						"name": "Channel.sbServer"
					}
				},
				{
					"id": 259,
					"name": "status",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 260,
						"name": "status",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "CLOSED"
								},
								{
									"type": "literal",
									"value": "CONNECTING"
								},
								{
									"type": "literal",
									"value": "OPEN"
								},
								{
									"type": "literal",
									"value": "CLOSING"
								}
							]
						}
					}
				},
				{
					"id": 249,
					"name": "checkServerStatus",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 250,
							"name": "checkServerStatus",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 251,
									"name": "url",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 252,
									"name": "timeout",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 253,
									"name": "callback",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 254,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 255,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"parameters": [
														{
															"id": 256,
															"name": "online",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 244,
					"name": "close",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 245,
							"name": "close",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 297,
					"name": "importKeys",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 298,
							"name": "importKeys",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 299,
									"name": "keyStrings",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 409,
										"name": "ChannelKeyStrings",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 446,
								"name": "Channel.importKeys"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 445,
						"name": "Channel.importKeys"
					}
				},
				{
					"id": 274,
					"name": "send",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 275,
							"name": "send",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "ChannelSocket.send()\n\nReturns a promise that resolves to \"success\" when sent,\nor an error message if it fails."
									}
								]
							},
							"parameters": [
								{
									"id": 276,
									"name": "msg",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 551,
												"name": "SBMessage",
												"package": "snackabra"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": 440,
								"name": "Channel.send"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": 439,
						"name": "Channel.send"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						223
					]
				},
				{
					"title": "Properties",
					"children": [
						285,
						237,
						279,
						283,
						282,
						284,
						232,
						312,
						287,
						286
					]
				},
				{
					"title": "Accessors",
					"children": [
						324,
						306,
						308,
						310,
						271,
						277,
						320,
						318,
						300,
						261,
						326,
						322,
						304,
						302,
						259
					]
				},
				{
					"title": "Methods",
					"children": [
						249,
						244,
						297,
						274
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 416,
					"name": "Channel",
					"package": "snackabra"
				}
			]
		},
		{
			"id": 136,
			"name": "MessageBus",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "SB simple events (mesage bus) class"
					}
				]
			},
			"children": [
				{
					"id": 137,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 138,
							"name": "new MessageBus",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 136,
								"name": "MessageBus",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 139,
					"name": "bus",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "Dictionary"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Dictionary",
						"package": "snackabra"
					},
					"defaultValue": "{}"
				},
				{
					"id": 151,
					"name": "publish",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 152,
							"name": "publish",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Publish"
									}
								]
							},
							"parameters": [
								{
									"id": 153,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 154,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "unknown"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 143,
					"name": "subscribe",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 144,
							"name": "subscribe",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Subscribe. 'event' is a string, special case '*' means everything\n (in which case the handler is also given the message)"
									}
								]
							},
							"parameters": [
								{
									"id": 145,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 146,
									"name": "handler",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "CallableFunction"
										},
										"name": "CallableFunction",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 147,
					"name": "unsubscribe",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 148,
							"name": "unsubscribe",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Unsubscribe"
									}
								]
							},
							"parameters": [
								{
									"id": 149,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 150,
									"name": "handler",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "CallableFunction"
										},
										"name": "CallableFunction",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						137
					]
				},
				{
					"title": "Properties",
					"children": [
						139
					]
				},
				{
					"title": "Methods",
					"children": [
						151,
						143,
						147
					]
				}
			]
		},
		{
			"id": 691,
			"name": "SB384",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isPublic": true
			},
			"children": [
				{
					"id": 692,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 693,
							"name": "new SB384",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Basic (core) capability object in SB.\n\nNote that all the getters below will throw an exception if the\ncorresponding information is not ready.\n\nLike most SB classes, SB384 follows the \"ready template\" design\npattern: the object is immediately available upon creation,\nbut isn't \"ready\" until it says it's ready. See "
									},
									{
										"kind": "code",
										"text": "`Channel Class`"
									},
									{
										"kind": "text",
										"text": "_\nexample below. Also see Design Note [4]_.\n\n"
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "https://snackabra.io/jslib.html#dn-004-the-ready-pattern",
										"target": "https://snackabra.io/jslib.html#dn-004-the-ready-pattern"
									}
								]
							},
							"parameters": [
								{
									"id": 694,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "a jwk with which to create identity; if not provided,\nit will 'mint' (generate) them randomly, in other words it will\ndefault to creating a new identity (\"384\")."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 691,
								"name": "SB384",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 695,
					"name": "ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 691,
								"name": "SB384",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					}
				},
				{
					"id": 696,
					"name": "sb384Ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 691,
								"name": "SB384",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					}
				},
				{
					"id": 710,
					"name": "_id",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 711,
						"name": "_id",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 706,
					"name": "exportable_privateKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 707,
						"name": "exportable_privateKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						}
					}
				},
				{
					"id": 704,
					"name": "exportable_pubKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 705,
						"name": "exportable_pubKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						}
					}
				},
				{
					"id": 712,
					"name": "ownerChannelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 713,
						"name": "ownerChannelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 708,
					"name": "privateKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 709,
						"name": "privateKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						}
					}
				},
				{
					"id": 702,
					"name": "readyFlag",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 703,
						"name": "readyFlag",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						692
					]
				},
				{
					"title": "Properties",
					"children": [
						695,
						696
					]
				},
				{
					"title": "Accessors",
					"children": [
						710,
						706,
						704,
						712,
						708,
						702
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 416,
					"name": "Channel"
				}
			]
		},
		{
			"id": 590,
			"name": "SBCrypto",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isPublic": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "SBCrypto\n\nSBCrypto contains all the SB specific crypto functions,\nas well as some general utility functions."
					}
				]
			},
			"children": [
				{
					"id": 591,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 592,
							"name": "new SBCrypto",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 590,
								"name": "SBCrypto",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 677,
					"name": "ab2str",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 678,
							"name": "ab2str",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Standardized 'ab2str()' function, array buffer to string.\nThis assumes one byte per character."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "string"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 679,
									"name": "buffer",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 688,
					"name": "channelKeyStringsToCryptoKeys",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 689,
							"name": "channelKeyStringsToCryptoKeys",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 690,
									"name": "keyStrings",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 409,
										"name": "ChannelKeyStrings",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 116,
										"name": "ChannelKeys",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 680,
					"name": "compareKeys",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 681,
							"name": "compareKeys",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.compareKeys()\n\nCompare JSON keys, true if the 'same', false if different. We consider\nthem \"equal\" if both have 'x' and 'y' properties and they are the same."
									}
								]
							},
							"parameters": [
								{
									"id": 682,
									"name": "key1",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "snackabra-jslib/snackabra.ts",
											"qualifiedName": "Dictionary"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"package": "snackabra"
									}
								},
								{
									"id": 683,
									"name": "key2",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "snackabra-jslib/snackabra.ts",
											"qualifiedName": "Dictionary"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 629,
					"name": "deriveKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 630,
							"name": "deriveKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.deriveKey()\n\nDerive key."
									}
								]
							},
							"parameters": [
								{
									"id": 631,
									"name": "privateKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 632,
									"name": "publicKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 633,
									"name": "type",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 634,
									"name": "extractable",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 635,
									"name": "keyUsages",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
												"qualifiedName": "KeyUsage"
											},
											"name": "KeyUsage",
											"package": "typescript"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 636,
					"name": "encrypt",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 637,
							"name": "encrypt",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.encrypt()\n\nEncrypt. if no nonce (iv) is given, will create it. Returns a Promise\nthat resolves either to raw array buffer or a packaged EncryptedContents.\nNote that for the former, nonce must be given."
									}
								]
							},
							"parameters": [
								{
									"id": 638,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "BufferSource"
										},
										"name": "BufferSource",
										"package": "typescript"
									}
								},
								{
									"id": 639,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 640,
									"name": "_iv",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Uint8Array"
												},
												"name": "Uint8Array",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 641,
									"name": "returnType",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "literal",
										"value": "encryptedContents"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 129,
										"name": "EncryptedContents",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 642,
							"name": "encrypt",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 643,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "BufferSource"
										},
										"name": "BufferSource",
										"package": "typescript"
									}
								},
								{
									"id": 644,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 645,
									"name": "_iv",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Uint8Array"
												},
												"name": "Uint8Array",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 646,
									"name": "returnType",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "literal",
										"value": "arrayBuffer"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 625,
					"name": "exportKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 626,
							"name": "exportKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.exportKey()"
									}
								]
							},
							"parameters": [
								{
									"id": 627,
									"name": "format",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "literal",
										"value": "jwk"
									}
								},
								{
									"id": 628,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 599,
					"name": "extractPubKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 600,
							"name": "extractPubKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Extracts (generates) public key from a private key."
									}
								]
							},
							"parameters": [
								{
									"id": 601,
									"name": "privateKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								]
							}
						}
					]
				},
				{
					"id": 609,
					"name": "generateChannelId",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 610,
							"name": "generateChannelId",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generates a channel ID from a public (owner) key. This is deterministic,\nused both for creating channels as well as at any time verifying ownership.\nReturns the SBChannelId, or error code if there are any issues:\n\n'InvalidJsonWebKey' - format (eg basic JWK) has issues\n'InvalidOwnerKey' - the key itself is not valid\n\n(Also does basic verification of the owner key itself)\n\nThe channel ID is base64 encoding of the SHA-384 hash of the public key,\ntaking the 'x' and 'y' fields. Not that is slightly restricted, it only\nallows [A-Za-z0-9_], eg does not allow the '-' character. This makes the\nencoding more practical for end-user interactions like copy-paste. This\nis accomplished by simply re-hashing until the result is valid. This \nreduces the entropy of the channel ID by a neglible amount."
									}
								]
							},
							"parameters": [
								{
									"id": 611,
									"name": "owner_key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "JsonWebKey"
												},
												"name": "JsonWebKey",
												"package": "typescript"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 593,
					"name": "generateIdKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 594,
							"name": "generateIdKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Hashes and splits into two (h1 and h1) signature of data, h1\nis used to request (salt, iv) pair and then h2 is used for\nencryption (h2, salt, iv)"
									}
								]
							},
							"parameters": [
								{
									"id": 595,
									"name": "buf",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "blob of data to be stored"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 596,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 597,
													"name": "id",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 598,
													"name": "key",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														597,
														598
													]
												}
											]
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 616,
					"name": "generateKeys",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 617,
							"name": "generateKeys",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.generatekeys()\n\nGenerates standard "
									},
									{
										"kind": "code",
										"text": "``ECDH``"
									},
									{
										"kind": "text",
										"text": " keys using "
									},
									{
										"kind": "code",
										"text": "``P-384``"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKeyPair"
										},
										"name": "CryptoKeyPair",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 618,
					"name": "importKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 619,
							"name": "importKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.importKey()\n\nImport keys"
									}
								]
							},
							"parameters": [
								{
									"id": 620,
									"name": "format",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "KeyFormat"
										},
										"name": "KeyFormat",
										"package": "typescript"
									}
								},
								{
									"id": 621,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "BufferSource"
												},
												"name": "BufferSource",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "JsonWebKey"
												},
												"name": "JsonWebKey",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 622,
									"name": "type",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "ECDH"
											},
											{
												"type": "literal",
												"value": "AES"
											},
											{
												"type": "literal",
												"value": "PBKDF2"
											}
										]
									}
								},
								{
									"id": 623,
									"name": "extractable",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 624,
									"name": "keyUsages",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
												"qualifiedName": "KeyUsage"
											},
											"name": "KeyUsage",
											"package": "typescript"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 684,
					"name": "lookupKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 685,
							"name": "lookupKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.lookupKey()\n\nUses compareKeys() to check for presense of a key in a list of keys.\nReturns index of key if found, -1 if not found."
									}
								]
							},
							"parameters": [
								{
									"id": 686,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								},
								{
									"id": 687,
									"name": "array",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
												"qualifiedName": "JsonWebKey"
											},
											"name": "JsonWebKey",
											"package": "typescript"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 665,
					"name": "sign",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 666,
							"name": "sign",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.sign()\n\nSign"
									}
								]
							},
							"parameters": [
								{
									"id": 667,
									"name": "secretKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 668,
									"name": "contents",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 674,
					"name": "str2ab",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 675,
							"name": "str2ab",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Standardized 'str2ab()' function, string to array buffer.\nThis assumes on byte per character."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "buffer"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 676,
									"name": "string",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 656,
					"name": "unwrap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 657,
							"name": "unwrap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.unwrap\n\nDecrypts a wrapped object, returns (promise to) decrypted contents\nper se (either as a string or arrayBuffer)"
									}
								]
							},
							"parameters": [
								{
									"id": 658,
									"name": "k",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 659,
									"name": "o",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 129,
										"name": "EncryptedContents",
										"package": "snackabra"
									}
								},
								{
									"id": 660,
									"name": "returnType",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "literal",
										"value": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 661,
							"name": "unwrap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 662,
									"name": "k",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 663,
									"name": "o",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 129,
										"name": "EncryptedContents",
										"package": "snackabra"
									}
								},
								{
									"id": 664,
									"name": "returnType",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "literal",
										"value": "arrayBuffer"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 669,
					"name": "verify",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 670,
							"name": "verify",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.verify()\n\nVerify signature."
									}
								]
							},
							"parameters": [
								{
									"id": 671,
									"name": "verifyKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 672,
									"name": "sign",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 673,
									"name": "contents",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 612,
					"name": "verifyChannelId",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 613,
							"name": "verifyChannelId",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "'Compare' two channel IDs. Note that this is not constant time."
									}
								]
							},
							"parameters": [
								{
									"id": 614,
									"name": "owner_key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "JsonWebKey"
												},
												"name": "JsonWebKey",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 615,
									"name": "channel_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 647,
					"name": "wrap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 648,
							"name": "wrap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 649,
									"name": "k",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 650,
									"name": "b",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 651,
									"name": "bodyType",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "literal",
										"value": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 129,
										"name": "EncryptedContents",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 652,
							"name": "wrap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 653,
									"name": "k",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 654,
									"name": "b",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								},
								{
									"id": 655,
									"name": "bodyType",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "literal",
										"value": "arrayBuffer"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 129,
										"name": "EncryptedContents",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						591
					]
				},
				{
					"title": "Methods",
					"children": [
						677,
						688,
						680,
						629,
						636,
						625,
						599,
						609,
						593,
						616,
						618,
						684,
						665,
						674,
						656,
						669,
						612,
						647
					]
				}
			]
		},
		{
			"id": 551,
			"name": "SBMessage",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isPublic": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Class SBMessage\n\nBody should be below 32KiB, though it tolerates up to 64KiB"
					}
				]
			},
			"children": [
				{
					"id": 552,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 553,
							"name": "new SBMessage",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 554,
									"name": "channel",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 416,
										"name": "Channel",
										"package": "snackabra"
									}
								},
								{
									"id": 555,
									"name": "body",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "''"
								}
							],
							"type": {
								"type": "reference",
								"target": 551,
								"name": "SBMessage",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 559,
					"name": "MAX_SB_BODY_SIZE",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 562,
					"name": "[SB_MESSAGE_SYMBOL]",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "true"
				},
				{
					"id": 557,
					"name": "channel",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": 416,
						"name": "Channel",
						"package": "snackabra"
					}
				},
				{
					"id": 558,
					"name": "contents",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "SBMessageContents"
						},
						"name": "SBMessageContents",
						"package": "snackabra"
					}
				},
				{
					"id": 556,
					"name": "ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 551,
								"name": "SBMessage",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					}
				},
				{
					"id": 560,
					"name": "send",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 561,
							"name": "send",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBMessage.send()"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						552
					]
				},
				{
					"title": "Properties",
					"children": [
						559,
						562,
						557,
						558,
						556
					]
				},
				{
					"title": "Methods",
					"children": [
						560
					]
				}
			]
		},
		{
			"id": 347,
			"name": "SBObjectHandleClass",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Basic object handle for a shard (all storage).\n\nTo RETRIEVE a shard, you need id and verification.\nNext generation shard servers will only require id32.\nSame goes for shard mirrors.\n\nTo DECRYPT a shard, you need key, iv, and salt. Current\ngeneration of shard servers will provide (iv, salt) upon\nrequest if (and only if) you have id and verification.\n\nNote that id32/key32 are array32 encoded (a32). (Both \nid and key are 256-bit entities).\n\n'verification' is a 64-bit integer, encoded as a string\nof up 23 characters: it is four 16-bit integers, either\njoined by '.' or simply concatenated. Currently all four\nvalues are random, future generation only first three\nare guaranteed to be random, the fourth may be \"designed\"."
					}
				]
			},
			"children": [
				{
					"id": 348,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 349,
							"name": "new SBObjectHandleClass",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 350,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 329,
										"name": "SBObjectHandle",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 347,
								"name": "SBObjectHandleClass",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 365,
					"name": "actualSize",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "optional: actual size of underlying file, if any"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 361,
					"name": "dateAndTime",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "optional: time of shard creation"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 360,
					"name": "fileName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "by convention will be \"PAYLOAD\" if it's a set of objects"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 363,
					"name": "fileType",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "optional: file type (mime)"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 358,
					"name": "iv",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "you'll need these in case you want to track an object\nacross future (storage) servers, but as long as you\nare within the same SB servers you can request them."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 364,
					"name": "lastModified",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "optional: last modified time (of underlying file, if any)"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 359,
					"name": "salt",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "you'll need these in case you want to track an object\nacross future (storage) servers, but as long as you\nare within the same SB servers you can request them."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 366,
					"name": "savedSize",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "optional: size of shard (may be different from actualSize)"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 362,
					"name": "shardServer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "optionally direct a shard to a specific server (especially for reads)"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 351,
					"name": "version",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "version of this object"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "'1'"
				},
				{
					"id": 369,
					"name": "id",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 370,
						"name": "id",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "id of object"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"setSignature": {
						"id": 371,
						"name": "id",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "id of object"
								}
							]
						},
						"parameters": [
							{
								"id": 372,
								"name": "value",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						}
					}
				},
				{
					"id": 377,
					"name": "id32",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 378,
						"name": "id32",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "optional: array32 format of id"
								}
							]
						},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "snackabra-jslib/snackabra.ts",
								"qualifiedName": "Base62Encoded"
							},
							"name": "Base62Encoded",
							"package": "snackabra"
						}
					},
					"setSignature": {
						"id": 379,
						"name": "id32",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "optional: array32 format of id"
								}
							]
						},
						"parameters": [
							{
								"id": 380,
								"name": "value",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "snackabra-jslib/snackabra.ts",
										"qualifiedName": "Base62Encoded"
									},
									"name": "Base62Encoded",
									"package": "snackabra"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						}
					}
				},
				{
					"id": 373,
					"name": "key",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 374,
						"name": "key",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "key of object"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"setSignature": {
						"id": 375,
						"name": "key",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "key of object"
								}
							]
						},
						"parameters": [
							{
								"id": 376,
								"name": "value",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						}
					}
				},
				{
					"id": 381,
					"name": "key32",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 382,
						"name": "key32",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "optional: array32 format of key"
								}
							]
						},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "snackabra-jslib/snackabra.ts",
								"qualifiedName": "Base62Encoded"
							},
							"name": "Base62Encoded",
							"package": "snackabra"
						}
					},
					"setSignature": {
						"id": 383,
						"name": "key32",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "optional: array32 format of key"
								}
							]
						},
						"parameters": [
							{
								"id": 384,
								"name": "value",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "snackabra-jslib/snackabra.ts",
										"qualifiedName": "Base62Encoded"
									},
									"name": "Base62Encoded",
									"package": "snackabra"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						}
					}
				},
				{
					"id": 389,
					"name": "type",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 390,
						"name": "type",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "type of object"
								}
							]
						},
						"type": {
							"type": "reference",
							"target": 328,
							"name": "SBObjectType",
							"package": "snackabra"
						}
					}
				},
				{
					"id": 385,
					"name": "verification",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 386,
						"name": "verification",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "and currently you also need to keep track of this,\nbut you can start sharing / communicating the\nobject before it's resolved: among other things it\nserves as a 'write-through' verification"
								}
							]
						},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "string"
								},
								{
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Promise"
									},
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "string"
										}
									],
									"name": "Promise",
									"package": "typescript"
								}
							]
						}
					},
					"setSignature": {
						"id": 387,
						"name": "verification",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "and currently you also need to keep track of this,\nbut you can start sharing / communicating the\nobject before it's resolved: among other things it\nserves as a 'write-through' verification"
								}
							]
						},
						"parameters": [
							{
								"id": 388,
								"name": "value",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Promise"
											},
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "string"
												}
											],
											"name": "Promise",
											"package": "typescript"
										}
									]
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						348
					]
				},
				{
					"title": "Properties",
					"children": [
						365,
						361,
						360,
						363,
						358,
						364,
						359,
						366,
						362,
						351
					]
				},
				{
					"title": "Accessors",
					"children": [
						369,
						377,
						373,
						381,
						389,
						385
					]
				}
			]
		},
		{
			"id": 563,
			"name": "Snackabra",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Snackabra is the main class for interacting with the Snackable backend.\n\nIt is a singleton, so you can only have one instance of it.\nIt is guaranteed to be synchronous, so you can use it right away.\nIt is also guaranteed to be thread-safe, so you can use it from multiple\nthreads.\n\nConstructor expects an object with the names of the matching servers, for example\nbelow shows the miniflare local dev config. Note that 'new Snackabra()' is\nguaranteed synchronous, so can be 'used' right away. You can optionally call\nwithout a parameter in which case SB will ping known servers."
					}
				],
				"blockTags": [
					{
						"tag": "@example",
						"content": [
							{
								"kind": "code",
								"text": "```typescript\n    const sb = new Snackabra({\n      channel_server: 'http://127.0.0.1:4001',\n      channel_ws: 'ws://127.0.0.1:4001',\n      storage_server: 'http://127.0.0.1:4000'\n    })\n```"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 564,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 565,
							"name": "new Snackabra",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 566,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "optional object with the names of the matching servers, for example\nbelow shows the miniflare local dev config. Note that 'new Snackabra()' is\nguaranteed synchronous, so can be 'used' right away. You can optionally call\nwithout a parameter in which case SB will ping known servers."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 82,
										"name": "SBServer",
										"package": "snackabra"
									}
								},
								{
									"id": 567,
									"name": "DEBUG",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "optional boolean to enable debug logging"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"target": 563,
								"name": "Snackabra",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 584,
					"name": "channel",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 585,
						"name": "channel",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Connects to a channel."
								}
							]
						},
						"type": {
							"type": "reference",
							"target": 416,
							"name": "Channel",
							"package": "snackabra"
						}
					}
				},
				{
					"id": 588,
					"name": "crypto",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 589,
						"name": "crypto",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns the crypto API."
								}
							]
						},
						"type": {
							"type": "reference",
							"target": 590,
							"name": "SBCrypto",
							"package": "snackabra"
						}
					}
				},
				{
					"id": 586,
					"name": "storage",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 587,
						"name": "storage",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns the storage API."
								}
							]
						},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "snackabra-jslib/snackabra.ts",
								"qualifiedName": "StorageApi"
							},
							"name": "StorageApi",
							"package": "snackabra"
						}
					}
				},
				{
					"id": 571,
					"name": "connect",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 572,
							"name": "connect",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Connects to :term:"
									},
									{
										"kind": "code",
										"text": "`Channel Name`"
									},
									{
										"kind": "text",
										"text": " on this SB config.\nReturns a channel socket promise right away, but it\nwill not be ready until the "
									},
									{
										"kind": "code",
										"text": "``ready``"
									},
									{
										"kind": "text",
										"text": " promise is resolved.\nNote that if you have a preferred server then the channel\nobject will be returned right away, but the "
									},
									{
										"kind": "code",
										"text": "``ready``"
									},
									{
										"kind": "text",
										"text": " promise\nwill still be pending. If you do not have a preferred server,\nthen the "
									},
									{
										"kind": "code",
										"text": "``ready``"
									},
									{
										"kind": "text",
										"text": " promise will be resolved when a least\none of the known servers is ready."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "a channel object"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 573,
									"name": "onMessage",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 574,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 575,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"parameters": [
														{
															"id": 576,
															"name": "m",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": 88,
																"name": "ChannelMessage",
																"package": "snackabra"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 577,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "optional key to use for encryption/decryption"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								},
								{
									"id": 578,
									"name": "channelId",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "optional channel id to use for encryption/decryption"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 222,
										"name": "ChannelSocket",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 579,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 580,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new channel. Currently uses trivial authentication.\nReturns a promise to a ''SBChannelHandle'' object\n(which includes the :term:"
									},
									{
										"kind": "code",
										"text": "`Channel Name`"
									},
									{
										"kind": "text",
										"text": ").\nNote that this method does not connect to the channel,\nit just creates (authorizes) it."
									}
								]
							},
							"parameters": [
								{
									"id": 581,
									"name": "sbServer",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "the server to use"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 82,
										"name": "SBServer",
										"package": "snackabra"
									}
								},
								{
									"id": 582,
									"name": "serverSecret",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "the server secret"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 583,
									"name": "keys",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "optional keys to use for encryption/decryption"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 79,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						564
					]
				},
				{
					"title": "Accessors",
					"children": [
						584,
						588,
						586
					]
				},
				{
					"title": "Methods",
					"children": [
						571,
						579
					]
				}
			]
		},
		{
			"id": 125,
			"name": "ChannelAdminData",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 128,
					"name": "capacity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 127,
					"name": "join_requests",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						}
					}
				},
				{
					"id": 126,
					"name": "room_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						128,
						127,
						126
					]
				}
			]
		},
		{
			"id": 400,
			"name": "ChannelData",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 407,
					"name": "SERVER_SECRET",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 402,
					"name": "channelId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 404,
					"name": "encryptionKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 406,
					"name": "motherChannel",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 403,
					"name": "ownerKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 401,
					"name": "roomId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 405,
					"name": "signKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 408,
					"name": "size",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						407,
						402,
						404,
						406,
						403,
						401,
						405,
						408
					]
				}
			]
		},
		{
			"id": 409,
			"name": "ChannelKeyStrings",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 410,
					"name": "encryptionKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 415,
					"name": "error",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 411,
					"name": "guestKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 414,
					"name": "lockedKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 412,
					"name": "ownerKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 413,
					"name": "signKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						410,
						415,
						411,
						414,
						412,
						413
					]
				}
			]
		},
		{
			"id": 116,
			"name": "ChannelKeys",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "ChannelKeys\n\nAll keys relevant for a given channel, in decoded (CryptoKey) form.\nThey are sent over channels as a message (see ChannelKeysMessage);\nin export/import code they may be in the intermediary form of\nstrings (see ChannelKeyStrings)."
					}
				],
				"blockTags": [
					{
						"tag": "@example",
						"content": [
							{
								"kind": "code",
								"text": "```ts\n{ \"ready\": true,\n *    \"keys\": {\n *            \"ownerKey\": \"{\\\"crv\\\":\\\"P-384\\\",\\\"ext\\\":true,\\\"key_ops\\\":[],\\\"kty\\\":\\\"EC\\\",\n *                        \\\"x\\\":\\\"9s17B4i0Cuf_w9XN_uAq2DFePOr6S3sMFMA95KjLN8akBUWEhPAcuMEMwNUlrrkN\\\",\n *                        \\\"y\\\":\\\"6dAtcyMbtsO5ufKvlhxRsvjTmkABGlTYG1BrEjTpwrAgtmn6k25GR7akklz9klBr\\\"}\",\n *            \"guestKey\": \"{\\\"crv\\\":\\\"P-384\\\",\\\"ext\\\":true,\\\"key_ops\\\":[],\\\"kty\\\":\\\"EC\\\",\n *                         \\\"x\\\":\\\"Lx0eJcbNuyEfHDobWaZqgy9UO7ppxVIsEpEtvbzkAlIjySh9lY2AvgnACREO6QXD\\\",\n *                         \\\"y\\\":\\\"zEHPgpsl4jge_Q-K6ekuzi2bQOybnaPT1MozCFQJnXEePBX8emkHriOiwl6P8BAS\\\"}\",\n *            \"encryptionKey\": \"{\\\"alg\\\":\\\"A256GCM\\\",\\\"ext\\\":true,\n *                             \\\"k\\\":\\\"F0sQTTLXDhuvvmgGQLzMoeHPD-SJlFyhfOD-cqejEOU\\\",\n *                             \\\"key_ops\\\":[\\\"encrypt\\\",\\\"decrypt\\\"],\\\"kty\\\":\\\"oct\\\"}\",\n *            \"signKey\": \"{\\\"crv\\\":\\\"P-384\\\",\n *                        \\\"d\\\":\\\"KCJHDZ34XgVFsS9-sU09HFzXZhnGCvnDgJ5a8GTSfjuJQaq-1N2acvchPRhknk8B\\\",\n *                        \\\"ext\\\":true,\\\"key_ops\\\":[\\\"deriveKey\\\"],\\\"kty\\\":\\\"EC\\\",\n *                        \\\"x\\\":\\\"rdsyBle0DD1hvp2OE2mINyyI87Cyg7FS3tCQUIeVkfPiNOACtFxi6iP8oeYt-Dge\\\",\n *                        \\\"y\\\":\\\"qW9VP72uf9rgUU117G7AfTkCMncJbT5scIaIRwBXfqET6FYcq20fwSP7R911J2_t\\\"}\"\n *             },\n * \"motd\": \"\",\n * \"roomLocked\": false}\n```"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 120,
					"name": "encryptionKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "CryptoKey"
						},
						"name": "CryptoKey",
						"package": "typescript"
					}
				},
				{
					"id": 119,
					"name": "guestKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "CryptoKey"
						},
						"name": "CryptoKey",
						"package": "typescript"
					}
				},
				{
					"id": 122,
					"name": "lockedKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "JsonWebKey"
						},
						"name": "JsonWebKey",
						"package": "typescript"
					}
				},
				{
					"id": 117,
					"name": "ownerKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "CryptoKey"
						},
						"name": "CryptoKey",
						"package": "typescript"
					}
				},
				{
					"id": 118,
					"name": "ownerPubKeyX",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 124,
					"name": "privateKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "CryptoKey"
						},
						"name": "CryptoKey",
						"package": "typescript"
					}
				},
				{
					"id": 123,
					"name": "publicSignKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "CryptoKey"
						},
						"name": "CryptoKey",
						"package": "typescript"
					}
				},
				{
					"id": 121,
					"name": "signKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "CryptoKey"
						},
						"name": "CryptoKey",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						120,
						119,
						122,
						117,
						118,
						124,
						123,
						121
					]
				}
			]
		},
		{
			"id": 88,
			"name": "ChannelMessage",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "for example the incoming message will look like this (after decryption)"
					}
				],
				"blockTags": [
					{
						"tag": "@example",
						"content": [
							{
								"kind": "code",
								"text": "```ts\n {\n   \"encrypted\":false,\n   \"contents\":\"Hello from test04d!\",\n   \"sign\":\"u7zAM-1fNLZjmuayOkwWvXTBGqMEimOuzp1DJGX4ECg\",\n   \"image\":\"\",\n   \"imageMetaData\":{},\n   \"sender_pubKey\":\n       {\n         \"crv\":\"P-384\",\"ext\":true,\"key_ops\":[],\"kty\":\"EC\",\n         \"x\":\"edqHd4aUn7dGsuDMQxtvzuw-Q2N7l77HBW81KvWj9qtzU7ab-sFHUBqogg2PKihj\",\n         \"y\":\"Oqp27bXL4RUcAHpWUEFHZdyEuhTo8_8oyTsAKJDk1g_NQOA0FR5Sy_8ViTTWS9wT\"\n       },\n   \"sender_username\":\"TestBot\",\n   \"image_sign\":\"3O0AYKthtWWYUX3AWDmdU4kTR49UyNyaA937CfKtcQw\",\n   \"imageMetadata_sign\":\"4LmewpsH6TcRhHYQLivd4Ce87SI1AJIaezhJB5sdD7M\"\n }\n ```"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 91,
					"name": "_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 95,
					"name": "channelID",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 98,
					"name": "contents",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 96,
					"name": "control",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 97,
					"name": "encrypted_contents",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 129,
						"name": "EncryptedContents",
						"package": "snackabra"
					}
				},
				{
					"id": 92,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 101,
					"name": "image",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 103,
					"name": "imageMetaData",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "ImageMetaData"
						},
						"name": "ImageMetaData",
						"package": "snackabra"
					}
				},
				{
					"id": 104,
					"name": "imageMetadata_sign",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 102,
					"name": "image_sign",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 90,
					"name": "keys",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 409,
						"name": "ChannelKeyStrings",
						"package": "snackabra"
					}
				},
				{
					"id": 105,
					"name": "motd",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 106,
					"name": "ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 107,
					"name": "roomLocked",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 108,
					"name": "sender_pubKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "JsonWebKey"
						},
						"name": "JsonWebKey",
						"package": "typescript"
					}
				},
				{
					"id": 109,
					"name": "sender_username",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 100,
					"name": "sign",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 110,
					"name": "system",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 99,
					"name": "text",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 93,
					"name": "timestamp",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 94,
					"name": "timestampPrefix",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 89,
					"name": "type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 135,
						"name": "ChannelMessageTypes",
						"package": "snackabra"
					}
				},
				{
					"id": 111,
					"name": "user",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 112,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 114,
									"name": "_id",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								},
								{
									"id": 113,
									"name": "name",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										114,
										113
									]
								}
							]
						}
					}
				},
				{
					"id": 115,
					"name": "verificationToken",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						91,
						95,
						98,
						96,
						97,
						92,
						101,
						103,
						104,
						102,
						90,
						105,
						106,
						107,
						108,
						109,
						100,
						110,
						99,
						93,
						94,
						89,
						111,
						115
					]
				}
			]
		},
		{
			"id": 129,
			"name": "EncryptedContents",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Encryptedcontents\n\nSB standard wrapping encrypted messages.\n\nEncryption is done with AES-GCM, 16 bytes of salt, The\n"
					},
					{
						"kind": "code",
						"text": "``contents``"
					},
					{
						"kind": "text",
						"text": " are url-safe base64, same thing with the nonce (iv),\ndepending on if it's internal or over wire."
					}
				]
			},
			"children": [
				{
					"id": 130,
					"name": "content",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ArrayBuffer"
								},
								"name": "ArrayBuffer",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 131,
					"name": "iv",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						130,
						131
					]
				}
			]
		},
		{
			"id": 132,
			"name": "EncryptedContentsBin",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Same as EncryptedContents interface, but binary view enforced"
					}
				]
			},
			"children": [
				{
					"id": 133,
					"name": "content",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBuffer"
						},
						"name": "ArrayBuffer",
						"package": "typescript"
					}
				},
				{
					"id": 134,
					"name": "iv",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Uint8Array"
						},
						"name": "Uint8Array",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						133,
						134
					]
				}
			]
		},
		{
			"id": 79,
			"name": "SBChannelHandle",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "SBChannelHandle\n\nComplete descriptor of a channel. 'key' is stringified 'jwk' key.\nThe key is always private. If it matches the channelId, then it's\nan 'owner' key."
					}
				]
			},
			"children": [
				{
					"id": 80,
					"name": "channelId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 81,
					"name": "key",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "JsonWebKey"
						},
						"name": "JsonWebKey",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						80,
						81
					]
				}
			]
		},
		{
			"id": 329,
			"name": "SBObjectHandle",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 346,
					"name": "[SB_OBJECT_HANDLE_SYMBOL]",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 344,
					"name": "actualSize",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 340,
					"name": "dateAndTime",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 339,
					"name": "fileName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 342,
					"name": "fileType",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 332,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 334,
					"name": "id32",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "Base62Encoded"
						},
						"name": "Base62Encoded",
						"package": "snackabra"
					}
				},
				{
					"id": 337,
					"name": "iv",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 333,
					"name": "key",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 335,
					"name": "key32",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "Base62Encoded"
						},
						"name": "Base62Encoded",
						"package": "snackabra"
					}
				},
				{
					"id": 343,
					"name": "lastModified",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 338,
					"name": "salt",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 345,
					"name": "savedSize",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 341,
					"name": "shardServer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 331,
					"name": "type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": 328,
						"name": "SBObjectType",
						"package": "snackabra"
					}
				},
				{
					"id": 336,
					"name": "verification",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 330,
					"name": "version",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "literal",
						"value": "1"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						346,
						344,
						340,
						339,
						342,
						332,
						334,
						337,
						333,
						335,
						343,
						338,
						345,
						341,
						331,
						336,
						330
					]
				}
			]
		},
		{
			"id": 391,
			"name": "SBObjectMetadata",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 399,
					"name": "[SB_OBJECT_HANDLE_SYMBOL]",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 394,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 397,
					"name": "iv",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Uint8Array"
						},
						"name": "Uint8Array",
						"package": "typescript"
					}
				},
				{
					"id": 395,
					"name": "key",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 396,
					"name": "paddedBuffer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBuffer"
						},
						"name": "ArrayBuffer",
						"package": "typescript"
					}
				},
				{
					"id": 398,
					"name": "salt",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Uint8Array"
						},
						"name": "Uint8Array",
						"package": "typescript"
					}
				},
				{
					"id": 393,
					"name": "type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": 328,
						"name": "SBObjectType",
						"package": "snackabra"
					}
				},
				{
					"id": 392,
					"name": "version",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "literal",
						"value": "1"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						399,
						394,
						397,
						395,
						396,
						398,
						393,
						392
					]
				}
			]
		},
		{
			"id": 155,
			"name": "SBPayload",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"indexSignature": {
				"id": 156,
				"name": "__index",
				"variant": "signature",
				"kind": 8192,
				"flags": {},
				"parameters": [
					{
						"id": 157,
						"name": "index",
						"variant": "param",
						"kind": 32768,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				],
				"type": {
					"type": "reference",
					"target": {
						"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
						"qualifiedName": "ArrayBuffer"
					},
					"name": "ArrayBuffer",
					"package": "typescript"
				}
			}
		},
		{
			"id": 82,
			"name": "SBServer",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 83,
					"name": "channel_server",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The channel server is the server that handles channel creation,\nchannel deletion, and channel access. It is also the server that\nhandles channel messages."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 84,
					"name": "channel_ws",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The channel websocket is the websocket that handles channel\nmessages. It is the same as the channel server, but with a\ndifferent protocol."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 86,
					"name": "shard_server",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "\"shard\" server is a more modern version of the storage server,\ngenerally acting as a caching and/or mirroring layer. It proxies\nany new storage to one or more storage servers, and handles\nit's own caching behavior. Generally, this will be the fastest\ninterface, in particular for reading."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 85,
					"name": "storage_server",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The storage server is the server that all \"shard\" (blob) storage"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						83,
						84,
						86,
						85
					]
				}
			]
		},
		{
			"id": 135,
			"name": "ChannelMessageTypes",
			"variant": "declaration",
			"kind": 4194304,
			"flags": {},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "ack"
					},
					{
						"type": "literal",
						"value": "keys"
					},
					{
						"type": "literal",
						"value": "invalid"
					},
					{
						"type": "literal",
						"value": "ready"
					},
					{
						"type": "literal",
						"value": "encypted"
					}
				]
			}
		},
		{
			"id": 87,
			"name": "SBChannelId",
			"variant": "declaration",
			"kind": 4194304,
			"flags": {},
			"type": {
				"type": "intrinsic",
				"name": "string"
			}
		},
		{
			"id": 328,
			"name": "SBObjectType",
			"variant": "declaration",
			"kind": 4194304,
			"flags": {},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "f"
					},
					{
						"type": "literal",
						"value": "p"
					},
					{
						"type": "literal",
						"value": "b"
					},
					{
						"type": "literal",
						"value": "t"
					}
				]
			}
		},
		{
			"id": 718,
			"name": "SB",
			"variant": "declaration",
			"kind": 32,
			"flags": {},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 719,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 722,
							"name": "Channel",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 416,
									"name": "Channel",
									"package": "snackabra"
								}
							},
							"defaultValue": "Channel"
						},
						{
							"id": 724,
							"name": "SB384",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 691,
									"name": "SB384",
									"package": "snackabra"
								}
							},
							"defaultValue": "SB384"
						},
						{
							"id": 723,
							"name": "SBCrypto",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 590,
									"name": "SBCrypto",
									"package": "snackabra"
								}
							},
							"defaultValue": "SBCrypto"
						},
						{
							"id": 721,
							"name": "SBMessage",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 551,
									"name": "SBMessage",
									"package": "snackabra"
								}
							},
							"defaultValue": "SBMessage"
						},
						{
							"id": 720,
							"name": "Snackabra",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 563,
									"name": "Snackabra",
									"package": "snackabra"
								}
							},
							"defaultValue": "Snackabra"
						},
						{
							"id": 725,
							"name": "arrayBufferToBase64",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 726,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"signatures": [
										{
											"id": 727,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Standardized 'btoa()'-like function, e.g., takes a binary string\n('b') and returns a Base64 encoded version ('a' used to be short\nfor 'ascii')."
													}
												],
												"blockTags": [
													{
														"tag": "@returns",
														"content": [
															{
																"kind": "text",
																"text": "- returns Base64 encoded string"
															}
														]
													}
												]
											},
											"parameters": [
												{
													"id": 728,
													"name": "buffer",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "binary string"
															}
														]
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": null
															},
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "ArrayBuffer"
																},
																"name": "ArrayBuffer",
																"package": "typescript"
															},
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Uint8Array"
																},
																"name": "Uint8Array",
																"package": "typescript"
															}
														]
													}
												},
												{
													"id": 729,
													"name": "variant",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "'b64' or 'url'"
															}
														]
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "url"
															},
															{
																"type": "literal",
																"value": "b64"
															}
														]
													},
													"defaultValue": "'url'"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							"defaultValue": "arrayBufferToBase64"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								722,
								724,
								723,
								721,
								720,
								725
							]
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 43,
			"name": "_appendBuffer",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 44,
					"name": "_appendBuffer",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Appends two buffers and returns a new buffer"
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "new buffer"
									}
								]
							}
						]
					},
					"parameters": [
						{
							"id": 45,
							"name": "buffer1",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							}
						},
						{
							"id": 46,
							"name": "buffer2",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBuffer"
						},
						"name": "ArrayBuffer",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 18,
			"name": "_assertBase64",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 19,
					"name": "_assertBase64",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns 'true' if (and only if) string is well-formed base64.\nWorks same on browsers and nodejs."
							}
						]
					},
					"parameters": [
						{
							"id": 20,
							"name": "base64",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 31,
			"name": "arrayBuffer32ToBase62",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 32,
					"name": "arrayBuffer32ToBase62",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "arrayBuffer32ToBase62 converts an ArrayBuffer32 to a base62 encoded string."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "base62 encoded string"
									}
								]
							}
						]
					},
					"parameters": [
						{
							"id": 33,
							"name": "buffer",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "ArrayBuffer32"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ArrayBuffer"
								},
								"name": "ArrayBuffer",
								"package": "typescript"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 714,
			"name": "arrayBufferToBase64",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 715,
					"name": "arrayBufferToBase64",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Standardized 'btoa()'-like function, e.g., takes a binary string\n('b') and returns a Base64 encoded version ('a' used to be short\nfor 'ascii')."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "- returns Base64 encoded string"
									}
								]
							}
						]
					},
					"parameters": [
						{
							"id": 716,
							"name": "buffer",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "binary string"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							}
						},
						{
							"id": 717,
							"name": "variant",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "'b64' or 'url'"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "url"
									},
									{
										"type": "literal",
										"value": "b64"
									}
								]
							},
							"defaultValue": "'url'"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 67,
			"name": "assemblePayload",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 68,
					"name": "assemblePayload",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Assemble payload"
							}
						]
					},
					"parameters": [
						{
							"id": 69,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 155,
								"name": "SBPayload",
								"package": "snackabra"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
									"qualifiedName": "BodyInit"
								},
								"name": "BodyInit",
								"package": "typescript"
							},
							{
								"type": "literal",
								"value": null
							}
						]
					}
				}
			]
		},
		{
			"id": 28,
			"name": "base62ToArrayBuffer32",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 29,
					"name": "base62ToArrayBuffer32",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "base62ToArrayBuffer32 converts a base62 encoded string to an ArrayBuffer32."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "ArrayBuffer32"
									}
								]
							}
						]
					},
					"parameters": [
						{
							"id": 30,
							"name": "s",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "base62 encoded string"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBuffer"
						},
						"name": "ArrayBuffer",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 34,
			"name": "base62ToBase64",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 35,
					"name": "base62ToBase64",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "base62ToBase64 converts a base62 encoded string to a base64 encoded string."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "base64 encoded string"
									}
								]
							},
							{
								"tag": "@throws",
								"content": [
									{
										"kind": "text",
										"text": "Error if the string is not a valid base62 encoded string"
									}
								]
							}
						]
					},
					"parameters": [
						{
							"id": 36,
							"name": "s",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "base62 encoded string"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 21,
			"name": "base64ToArrayBuffer",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 22,
					"name": "base64ToArrayBuffer",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Standardized 'atob()' function, e.g. takes the a Base64 encoded\ninput and decodes it. Note: always returns Uint8Array.\nAccepts both regular Base64 and the URL-friendly variant,\nwhere "
							},
							{
								"kind": "code",
								"text": "`+`"
							},
							{
								"kind": "text",
								"text": " => "
							},
							{
								"kind": "code",
								"text": "`-`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`/`"
							},
							{
								"kind": "text",
								"text": " => "
							},
							{
								"kind": "code",
								"text": "`_`"
							},
							{
								"kind": "text",
								"text": ", and the padding character is omitted."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "- returns decoded binary result"
									}
								]
							}
						]
					},
					"parameters": [
						{
							"id": 23,
							"name": "str",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "string in either regular or URL-friendly representation."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Uint8Array"
						},
						"name": "Uint8Array",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 37,
			"name": "base64ToBase62",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 38,
					"name": "base64ToBase62",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "base64ToBase62 converts a base64 encoded string to a base62 encoded string."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "base62 encoded string"
									}
								]
							},
							{
								"tag": "@throws",
								"content": [
									{
										"kind": "text",
										"text": "Error if the string is not a valid base64 encoded string"
									}
								]
							}
						]
					},
					"parameters": [
						{
							"id": 39,
							"name": "s",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "base64 encoded string"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 53,
			"name": "cleanBase32mi",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 54,
					"name": "cleanBase32mi",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This function disambiguates strings that are known to be 'base32mi' type.\nBelow is the list of base32 characters, and the disambiguation table.\nbase32mi is designed to be human-friendly, so this function can be \nsafely called anywhere you have human input - including as an \nevent on an input field that immediately makes any correction. \n\nYou can think of the translation either in terms of many-to-one\n(all entered characters that map to a specific base32mi character),\nor as a one-to-one correspondence (where '.' means 'no change')."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n'base32mi': '0123456789abcdefyhEjkLmNHpFrRTUW'\n\n    [OoQD] -> '0'\n    [lIiJ] -> '1'\n    [Zz] -> '2'\n    [A] -> '4'\n    [Ss] -> '5'\n    [G] -> '6'\n    [t] -> '7'\n    [B] -> '8'\n    [gq] -> '9'\n    [C] -> 'c'\n    [Y] -> 'y'\n    [KxX] -> 'k'\n    [M] -> 'm'\n    [n] -> 'N'\n    [P] -> 'p'\n    [uvV] -> 'U'\n    [w] -> 'W'\n\n    0123456789abcdefghijklmnopqrstuvxyzABCDEFGHIJKLMNOPQRSTUVXYZ\n    ................9.1..1.N0.9.57UUk.248c0EF6.11kLm.0p0.5..Uky2\n```"
									}
								]
							}
						]
					},
					"parameters": [
						{
							"id": 55,
							"name": "s",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 24,
			"name": "compareBuffers",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 25,
					"name": "compareBuffers",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Compare buffers"
							}
						]
					},
					"parameters": [
						{
							"id": 26,
							"name": "a",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							}
						},
						{
							"id": 27,
							"name": "b",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 76,
			"name": "decodeB64Url",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 77,
					"name": "decodeB64Url",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Decode b64 URL"
							}
						]
					},
					"parameters": [
						{
							"id": 78,
							"name": "input",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 73,
			"name": "encodeB64Url",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 74,
					"name": "encodeB64Url",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Encode into b64 URL"
							}
						]
					},
					"parameters": [
						{
							"id": 75,
							"name": "input",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 1,
			"name": "encryptedContentsMakeBinary",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 2,
					"name": "encryptedContentsMakeBinary",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Force EncryptedContents object to binary (interface\nsupports either string or arrays). String contents\nimplies base64 encoding."
							}
						]
					},
					"parameters": [
						{
							"id": 3,
							"name": "o",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 129,
								"name": "EncryptedContents",
								"package": "snackabra"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 132,
						"name": "EncryptedContentsBin",
						"package": "snackabra"
					}
				}
			]
		},
		{
			"id": 70,
			"name": "extractPayload",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 71,
					"name": "extractPayload",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Extract payload - this decodes from our binary (wire) format\nto a JS object. This provides a binary encoding of any JSON,\nand it allows some elements of the JSON to be raw (binary)."
							}
						]
					},
					"parameters": [
						{
							"id": 72,
							"name": "payload",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ArrayBuffer"
								},
								"name": "ArrayBuffer",
								"package": "typescript"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 155,
						"name": "SBPayload",
						"package": "snackabra"
					}
				}
			]
		},
		{
			"id": 64,
			"name": "extractPayloadV1",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 65,
					"name": "extractPayloadV1",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Deprecated (older version of payloads, for older channels)"
							}
						]
					},
					"parameters": [
						{
							"id": 66,
							"name": "payload",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ArrayBuffer"
								},
								"name": "ArrayBuffer",
								"package": "typescript"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 155,
						"name": "SBPayload",
						"package": "snackabra"
					}
				}
			]
		},
		{
			"id": 15,
			"name": "getRandomValues",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 16,
					"name": "getRandomValues",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Fills buffer with random data"
							}
						]
					},
					"parameters": [
						{
							"id": 17,
							"name": "buffer",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Uint8Array"
						},
						"name": "Uint8Array",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 40,
			"name": "isBase62Encoded",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 41,
					"name": "isBase62Encoded",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 42,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "snackabra-jslib/snackabra.ts",
								"qualifiedName": "Base62Encoded"
							},
							"name": "Base62Encoded",
							"package": "snackabra"
						}
					}
				}
			]
		},
		{
			"id": 60,
			"name": "jsonParseWrapper",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 61,
					"name": "jsonParseWrapper",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "There are many problems with JSON parsing, adding a wrapper to capture more info.\nThe 'loc' parameter should be a (unique) string that allows you to find the usage\nin the code; one approach is the line number in the file (at some point)."
							}
						]
					},
					"parameters": [
						{
							"id": 62,
							"name": "str",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 63,
							"name": "loc",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 56,
			"name": "partition",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 57,
					"name": "partition",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Partition"
							}
						]
					},
					"parameters": [
						{
							"id": 58,
							"name": "str",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 59,
							"name": "n",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			]
		},
		{
			"id": 47,
			"name": "simpleRand256",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 48,
					"name": "simpleRand256",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns random number"
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "integer 0..255"
									}
								]
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			]
		},
		{
			"id": 49,
			"name": "simpleRandomString",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 50,
					"name": "simpleRandomString",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a random string in requested encoding"
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "random string\n\nbase32mi: "
									},
									{
										"kind": "code",
										"text": "``0123456789abcdefyhEjkLmNHpFrRTUW``"
									}
								]
							}
						]
					},
					"parameters": [
						{
							"id": 51,
							"name": "n",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 52,
							"name": "code",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				416,
				477,
				158,
				222,
				136,
				691,
				590,
				551,
				347,
				563
			]
		},
		{
			"title": "Interfaces",
			"children": [
				125,
				400,
				409,
				116,
				88,
				129,
				132,
				79,
				329,
				391,
				155,
				82
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				135,
				87,
				328
			]
		},
		{
			"title": "Variables",
			"children": [
				718
			]
		},
		{
			"title": "Functions",
			"children": [
				43,
				18,
				31,
				714,
				67,
				28,
				34,
				21,
				37,
				53,
				24,
				76,
				73,
				1,
				70,
				64,
				15,
				40,
				60,
				56,
				47,
				49
			]
		}
	],
	"packageName": "snackabra",
	"symbolIdMap": {
		"0": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": ""
		},
		"1": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "encryptedContentsMakeBinary"
		},
		"2": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "encryptedContentsMakeBinary"
		},
		"3": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "o"
		},
		"15": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "getRandomValues"
		},
		"16": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "getRandomValues"
		},
		"17": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer"
		},
		"18": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_assertBase64"
		},
		"19": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_assertBase64"
		},
		"20": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base64"
		},
		"21": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base64ToArrayBuffer"
		},
		"22": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base64ToArrayBuffer"
		},
		"23": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "str"
		},
		"24": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "compareBuffers"
		},
		"25": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "compareBuffers"
		},
		"26": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "a"
		},
		"27": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "b"
		},
		"28": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62ToArrayBuffer32"
		},
		"29": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62ToArrayBuffer32"
		},
		"30": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s"
		},
		"31": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBuffer32ToBase62"
		},
		"32": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBuffer32ToBase62"
		},
		"33": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer"
		},
		"34": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62ToBase64"
		},
		"35": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62ToBase64"
		},
		"36": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s"
		},
		"37": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base64ToBase62"
		},
		"38": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base64ToBase62"
		},
		"39": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s"
		},
		"40": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "isBase62Encoded"
		},
		"41": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "isBase62Encoded"
		},
		"42": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "value"
		},
		"43": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_appendBuffer"
		},
		"44": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_appendBuffer"
		},
		"45": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer1"
		},
		"46": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer2"
		},
		"47": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "simpleRand256"
		},
		"48": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "simpleRand256"
		},
		"49": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "simpleRandomString"
		},
		"50": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "simpleRandomString"
		},
		"51": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "n"
		},
		"52": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "code"
		},
		"53": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "cleanBase32mi"
		},
		"54": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "cleanBase32mi"
		},
		"55": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s"
		},
		"56": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "partition"
		},
		"57": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "partition"
		},
		"58": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "str"
		},
		"59": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "n"
		},
		"60": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "jsonParseWrapper"
		},
		"61": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "jsonParseWrapper"
		},
		"62": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "str"
		},
		"63": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "loc"
		},
		"64": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "extractPayloadV1"
		},
		"65": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "extractPayloadV1"
		},
		"66": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "payload"
		},
		"67": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "assemblePayload"
		},
		"68": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "assemblePayload"
		},
		"69": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "data"
		},
		"70": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "extractPayload"
		},
		"71": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "extractPayload"
		},
		"72": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "payload"
		},
		"73": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "encodeB64Url"
		},
		"74": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "encodeB64Url"
		},
		"75": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "input"
		},
		"76": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "decodeB64Url"
		},
		"77": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "decodeB64Url"
		},
		"78": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "input"
		},
		"79": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelHandle"
		},
		"80": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelHandle.channelId"
		},
		"81": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelHandle.key"
		},
		"82": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBServer"
		},
		"83": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBServer.channel_server"
		},
		"84": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBServer.channel_ws"
		},
		"85": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBServer.storage_server"
		},
		"86": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBServer.shard_server"
		},
		"87": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelId"
		},
		"88": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage"
		},
		"89": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.type"
		},
		"90": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.keys"
		},
		"91": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage._id"
		},
		"92": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.id"
		},
		"93": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.timestamp"
		},
		"94": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.timestampPrefix"
		},
		"95": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.channelID"
		},
		"96": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.control"
		},
		"97": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.encrypted_contents"
		},
		"98": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.contents"
		},
		"99": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.text"
		},
		"100": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.sign"
		},
		"101": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.image"
		},
		"102": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.image_sign"
		},
		"103": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.imageMetaData"
		},
		"104": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.imageMetadata_sign"
		},
		"105": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.motd"
		},
		"106": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.ready"
		},
		"107": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.roomLocked"
		},
		"108": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.sender_pubKey"
		},
		"109": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.sender_username"
		},
		"110": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.system"
		},
		"111": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.user"
		},
		"112": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"113": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.name"
		},
		"114": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type._id"
		},
		"115": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.verificationToken"
		},
		"116": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys"
		},
		"117": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys.ownerKey"
		},
		"118": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys.ownerPubKeyX"
		},
		"119": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys.guestKey"
		},
		"120": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys.encryptionKey"
		},
		"121": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys.signKey"
		},
		"122": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys.lockedKey"
		},
		"123": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys.publicSignKey"
		},
		"124": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys.privateKey"
		},
		"125": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData"
		},
		"126": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData.room_id"
		},
		"127": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData.join_requests"
		},
		"128": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData.capacity"
		},
		"129": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EncryptedContents"
		},
		"130": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EncryptedContents.content"
		},
		"131": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EncryptedContents.iv"
		},
		"132": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EncryptedContentsBin"
		},
		"133": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EncryptedContentsBin.content"
		},
		"134": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EncryptedContentsBin.iv"
		},
		"135": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessageTypes"
		},
		"136": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus"
		},
		"139": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.bus"
		},
		"143": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.subscribe"
		},
		"144": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.subscribe"
		},
		"145": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "event"
		},
		"146": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "handler"
		},
		"147": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.unsubscribe"
		},
		"148": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.unsubscribe"
		},
		"149": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "event"
		},
		"150": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "handler"
		},
		"151": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.publish"
		},
		"152": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.publish"
		},
		"153": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "event"
		},
		"154": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "args"
		},
		"155": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBPayload"
		},
		"156": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBPayload.__index"
		},
		"158": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelEndpoint"
		},
		"159": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelEndpoint.__constructor"
		},
		"160": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelEndpoint"
		},
		"161": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "sbServer"
		},
		"162": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"163": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channelId"
		},
		"164": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelEndpoint.adminData"
		},
		"165": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelEndpoint.send"
		},
		"166": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelEndpoint.send"
		},
		"167": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_m"
		},
		"168": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_messageType"
		},
		"169": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelEndpoint.onMessage"
		},
		"170": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelEndpoint.onMessage"
		},
		"171": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_f"
		},
		"172": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelReady"
		},
		"175": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.motd"
		},
		"176": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.locked"
		},
		"177": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.owner"
		},
		"178": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.admin"
		},
		"179": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.verifiedGuest"
		},
		"180": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.userName"
		},
		"190": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.importKeys"
		},
		"191": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.importKeys"
		},
		"192": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "keyStrings"
		},
		"193": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.keys"
		},
		"194": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.keys"
		},
		"195": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.sbServer"
		},
		"196": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.sbServer"
		},
		"197": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.readyFlag"
		},
		"198": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.readyFlag"
		},
		"199": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.api"
		},
		"200": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.api"
		},
		"201": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelId"
		},
		"202": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelId"
		},
		"203": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelSignKey"
		},
		"204": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelSignKey"
		},
		"205": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ready"
		},
		"206": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.sb384Ready"
		},
		"212": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_pubKey"
		},
		"213": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_pubKey"
		},
		"214": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_privateKey"
		},
		"215": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_privateKey"
		},
		"216": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.privateKey"
		},
		"217": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.privateKey"
		},
		"218": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384._id"
		},
		"219": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384._id"
		},
		"220": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"221": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"222": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket"
		},
		"223": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.__constructor"
		},
		"224": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket"
		},
		"225": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "sbServer"
		},
		"226": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "onMessage"
		},
		"227": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"228": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"229": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "m"
		},
		"230": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"231": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channelId"
		},
		"232": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.ready"
		},
		"237": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.adminData"
		},
		"244": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.close"
		},
		"245": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.close"
		},
		"249": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.checkServerStatus"
		},
		"250": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.checkServerStatus"
		},
		"251": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "url"
		},
		"252": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "timeout"
		},
		"253": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "callback"
		},
		"254": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"255": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"256": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "online"
		},
		"259": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.status"
		},
		"260": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.status"
		},
		"261": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.onMessage"
		},
		"262": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.onMessage"
		},
		"263": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"264": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"265": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "m"
		},
		"266": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.onMessage"
		},
		"267": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "f"
		},
		"268": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"269": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"270": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "m"
		},
		"271": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.enableTrace"
		},
		"272": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.enableTrace"
		},
		"273": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "b"
		},
		"274": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.send"
		},
		"275": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.send"
		},
		"276": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "msg"
		},
		"277": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.exportable_owner_pubKey"
		},
		"278": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.exportable_owner_pubKey"
		},
		"279": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelReady"
		},
		"282": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.motd"
		},
		"283": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.locked"
		},
		"284": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.owner"
		},
		"285": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.admin"
		},
		"286": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.verifiedGuest"
		},
		"287": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.userName"
		},
		"297": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.importKeys"
		},
		"298": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.importKeys"
		},
		"299": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "keyStrings"
		},
		"300": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.keys"
		},
		"301": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.keys"
		},
		"302": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.sbServer"
		},
		"303": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.sbServer"
		},
		"304": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.readyFlag"
		},
		"305": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.readyFlag"
		},
		"306": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.api"
		},
		"307": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.api"
		},
		"308": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelId"
		},
		"309": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelId"
		},
		"310": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelSignKey"
		},
		"311": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelSignKey"
		},
		"312": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.sb384Ready"
		},
		"318": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_pubKey"
		},
		"319": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_pubKey"
		},
		"320": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_privateKey"
		},
		"321": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_privateKey"
		},
		"322": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.privateKey"
		},
		"323": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.privateKey"
		},
		"324": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384._id"
		},
		"325": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384._id"
		},
		"326": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"327": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"328": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectType"
		},
		"329": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle"
		},
		"330": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.version"
		},
		"331": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.type"
		},
		"332": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.id"
		},
		"333": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.key"
		},
		"334": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.id32"
		},
		"335": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.key32"
		},
		"336": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.verification"
		},
		"337": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.iv"
		},
		"338": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.salt"
		},
		"339": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.fileName"
		},
		"340": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.dateAndTime"
		},
		"341": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.shardServer"
		},
		"342": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.fileType"
		},
		"343": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.lastModified"
		},
		"344": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.actualSize"
		},
		"345": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.savedSize"
		},
		"346": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.[SB_OBJECT_HANDLE_SYMBOL]"
		},
		"347": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass"
		},
		"348": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.__constructor"
		},
		"349": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass"
		},
		"350": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "options"
		},
		"351": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.version"
		},
		"358": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.iv"
		},
		"359": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.salt"
		},
		"360": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.fileName"
		},
		"361": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.dateAndTime"
		},
		"362": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.shardServer"
		},
		"363": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.fileType"
		},
		"364": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.lastModified"
		},
		"365": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.actualSize"
		},
		"366": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.savedSize"
		},
		"369": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.id"
		},
		"370": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.id"
		},
		"371": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.id"
		},
		"372": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "value"
		},
		"373": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.key"
		},
		"374": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.key"
		},
		"375": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.key"
		},
		"376": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "value"
		},
		"377": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.id32"
		},
		"378": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.id32"
		},
		"379": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.id32"
		},
		"380": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "value"
		},
		"381": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.key32"
		},
		"382": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.key32"
		},
		"383": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.key32"
		},
		"384": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "value"
		},
		"385": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.verification"
		},
		"386": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.verification"
		},
		"387": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.verification"
		},
		"388": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "value"
		},
		"389": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.type"
		},
		"390": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleClass.type"
		},
		"391": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectMetadata"
		},
		"392": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectMetadata.version"
		},
		"393": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectMetadata.type"
		},
		"394": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectMetadata.id"
		},
		"395": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectMetadata.key"
		},
		"396": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectMetadata.paddedBuffer"
		},
		"397": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectMetadata.iv"
		},
		"398": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectMetadata.salt"
		},
		"399": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectMetadata.[SB_OBJECT_HANDLE_SYMBOL]"
		},
		"400": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData"
		},
		"401": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData.roomId"
		},
		"402": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData.channelId"
		},
		"403": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData.ownerKey"
		},
		"404": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData.encryptionKey"
		},
		"405": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData.signKey"
		},
		"406": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData.motherChannel"
		},
		"407": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData.SERVER_SECRET"
		},
		"408": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData.size"
		},
		"409": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeyStrings"
		},
		"410": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeyStrings.encryptionKey"
		},
		"411": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeyStrings.guestKey"
		},
		"412": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeyStrings.ownerKey"
		},
		"413": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeyStrings.signKey"
		},
		"414": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeyStrings.lockedKey"
		},
		"415": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeyStrings.error"
		},
		"416": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel"
		},
		"417": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.__constructor"
		},
		"418": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel"
		},
		"419": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "sbServer"
		},
		"420": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"421": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channelId"
		},
		"422": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelReady"
		},
		"425": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.motd"
		},
		"426": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.locked"
		},
		"427": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.owner"
		},
		"428": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.admin"
		},
		"429": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.verifiedGuest"
		},
		"430": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.userName"
		},
		"439": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.send"
		},
		"440": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.send"
		},
		"441": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "m"
		},
		"442": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "messageType"
		},
		"444": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.adminData"
		},
		"445": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.importKeys"
		},
		"446": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.importKeys"
		},
		"447": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "keyStrings"
		},
		"448": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.keys"
		},
		"449": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.keys"
		},
		"450": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.sbServer"
		},
		"451": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.sbServer"
		},
		"452": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.readyFlag"
		},
		"453": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.readyFlag"
		},
		"454": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.api"
		},
		"455": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.api"
		},
		"456": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelId"
		},
		"457": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelId"
		},
		"458": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelSignKey"
		},
		"459": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelSignKey"
		},
		"460": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ready"
		},
		"461": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.sb384Ready"
		},
		"467": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_pubKey"
		},
		"468": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_pubKey"
		},
		"469": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_privateKey"
		},
		"470": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_privateKey"
		},
		"471": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.privateKey"
		},
		"472": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.privateKey"
		},
		"473": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384._id"
		},
		"474": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384._id"
		},
		"475": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"476": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"477": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi"
		},
		"478": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.__constructor"
		},
		"479": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi"
		},
		"480": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channel"
		},
		"487": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.getLastMessageTimes"
		},
		"488": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.getLastMessageTimes"
		},
		"489": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.getOldMessages"
		},
		"490": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.getOldMessages"
		},
		"491": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "currentMessagesLength"
		},
		"492": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "paginate"
		},
		"499": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.channelId"
		},
		"500": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.channelId"
		},
		"501": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.updateCapacity"
		},
		"502": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.updateCapacity"
		},
		"503": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "capacity"
		},
		"504": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.getCapacity"
		},
		"505": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.getCapacity"
		},
		"506": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.getStorageLimit"
		},
		"507": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.getStorageLimit"
		},
		"508": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.getMother"
		},
		"509": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.getMother"
		},
		"510": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.getJoinRequests"
		},
		"511": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.getJoinRequests"
		},
		"512": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.isLocked"
		},
		"513": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.isLocked"
		},
		"514": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.setMOTD"
		},
		"515": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.setMOTD"
		},
		"516": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "motd"
		},
		"517": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.getAdminData"
		},
		"518": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.getAdminData"
		},
		"519": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.downloadData"
		},
		"520": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.downloadData"
		},
		"521": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.uploadChannel"
		},
		"522": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.uploadChannel"
		},
		"523": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channelData"
		},
		"524": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.authorize"
		},
		"525": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.authorize"
		},
		"526": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ownerPublicKey"
		},
		"527": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "serverSecret"
		},
		"528": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.postPubKey"
		},
		"529": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.postPubKey"
		},
		"530": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_exportable_pubKey"
		},
		"531": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"532": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.success"
		},
		"533": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.storageRequest"
		},
		"534": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.storageRequest"
		},
		"535": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "byteLength"
		},
		"536": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.lock"
		},
		"537": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.lock"
		},
		"538": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.acceptVisitor"
		},
		"539": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.acceptVisitor"
		},
		"540": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "pubKey"
		},
		"541": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.ownerKeyRotation"
		},
		"542": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.ownerKeyRotation"
		},
		"543": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.budd"
		},
		"544": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.budd"
		},
		"545": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApi.budd"
		},
		"546": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "options"
		},
		"547": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"548": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.keys"
		},
		"549": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.storage"
		},
		"550": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.targetChannel"
		},
		"551": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage"
		},
		"552": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.__constructor"
		},
		"553": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage"
		},
		"554": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channel"
		},
		"555": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "body"
		},
		"556": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.ready"
		},
		"557": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.channel"
		},
		"558": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.contents"
		},
		"559": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.MAX_SB_BODY_SIZE"
		},
		"560": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.send"
		},
		"561": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.send"
		},
		"562": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.[SB_MESSAGE_SYMBOL]"
		},
		"563": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra"
		},
		"564": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.__constructor"
		},
		"565": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra"
		},
		"566": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "args"
		},
		"567": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "DEBUG"
		},
		"571": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.connect"
		},
		"572": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.connect"
		},
		"573": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "onMessage"
		},
		"574": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"575": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"576": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "m"
		},
		"577": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"578": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channelId"
		},
		"579": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.create"
		},
		"580": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.create"
		},
		"581": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "sbServer"
		},
		"582": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "serverSecret"
		},
		"583": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "keys"
		},
		"584": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.channel"
		},
		"585": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.channel"
		},
		"586": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.storage"
		},
		"587": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.storage"
		},
		"588": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.crypto"
		},
		"589": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.crypto"
		},
		"590": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto"
		},
		"593": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.generateIdKey"
		},
		"594": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.generateIdKey"
		},
		"595": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buf"
		},
		"596": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"597": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.id"
		},
		"598": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.key"
		},
		"599": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.extractPubKey"
		},
		"600": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.extractPubKey"
		},
		"601": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "privateKey"
		},
		"609": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.generateChannelId"
		},
		"610": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.generateChannelId"
		},
		"611": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "owner_key"
		},
		"612": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.verifyChannelId"
		},
		"613": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.verifyChannelId"
		},
		"614": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "owner_key"
		},
		"615": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channel_id"
		},
		"616": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.generateKeys"
		},
		"617": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.generateKeys"
		},
		"618": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.importKey"
		},
		"619": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.importKey"
		},
		"620": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "format"
		},
		"621": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"622": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "type"
		},
		"623": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "extractable"
		},
		"624": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "keyUsages"
		},
		"625": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.exportKey"
		},
		"626": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.exportKey"
		},
		"627": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "format"
		},
		"628": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"629": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.deriveKey"
		},
		"630": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.deriveKey"
		},
		"631": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "privateKey"
		},
		"632": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "publicKey"
		},
		"633": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "type"
		},
		"634": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "extractable"
		},
		"635": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "keyUsages"
		},
		"636": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.encrypt"
		},
		"637": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.encrypt"
		},
		"638": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "data"
		},
		"639": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"640": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_iv"
		},
		"641": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "returnType"
		},
		"642": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.encrypt"
		},
		"643": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "data"
		},
		"644": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"645": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_iv"
		},
		"646": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "returnType"
		},
		"647": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.wrap"
		},
		"648": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.wrap"
		},
		"649": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "k"
		},
		"650": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "b"
		},
		"651": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "bodyType"
		},
		"652": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.wrap"
		},
		"653": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "k"
		},
		"654": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "b"
		},
		"655": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "bodyType"
		},
		"656": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.unwrap"
		},
		"657": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.unwrap"
		},
		"658": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "k"
		},
		"659": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "o"
		},
		"660": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "returnType"
		},
		"661": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.unwrap"
		},
		"662": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "k"
		},
		"663": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "o"
		},
		"664": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "returnType"
		},
		"665": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.sign"
		},
		"666": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.sign"
		},
		"667": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "secretKey"
		},
		"668": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "contents"
		},
		"669": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.verify"
		},
		"670": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.verify"
		},
		"671": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "verifyKey"
		},
		"672": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "sign"
		},
		"673": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "contents"
		},
		"674": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.str2ab"
		},
		"675": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.str2ab"
		},
		"676": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "string"
		},
		"677": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.ab2str"
		},
		"678": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.ab2str"
		},
		"679": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer"
		},
		"680": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.compareKeys"
		},
		"681": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.compareKeys"
		},
		"682": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key1"
		},
		"683": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key2"
		},
		"684": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.lookupKey"
		},
		"685": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.lookupKey"
		},
		"686": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"687": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "array"
		},
		"688": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.channelKeyStringsToCryptoKeys"
		},
		"689": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.channelKeyStringsToCryptoKeys"
		},
		"690": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "keyStrings"
		},
		"691": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384"
		},
		"692": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.__constructor"
		},
		"693": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384"
		},
		"694": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"695": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ready"
		},
		"696": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.sb384Ready"
		},
		"702": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.readyFlag"
		},
		"703": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.readyFlag"
		},
		"704": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_pubKey"
		},
		"705": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_pubKey"
		},
		"706": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_privateKey"
		},
		"707": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_privateKey"
		},
		"708": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.privateKey"
		},
		"709": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.privateKey"
		},
		"710": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384._id"
		},
		"711": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384._id"
		},
		"712": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"713": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"714": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase64"
		},
		"715": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase64"
		},
		"716": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer"
		},
		"717": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "variant"
		},
		"718": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB"
		},
		"719": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object"
		},
		"720": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.Snackabra"
		},
		"721": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.SBMessage"
		},
		"722": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.Channel"
		},
		"723": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.SBCrypto"
		},
		"724": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.SB384"
		},
		"725": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.arrayBufferToBase64"
		},
		"726": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase64"
		},
		"727": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase64"
		},
		"728": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer"
		},
		"729": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "variant"
		}
	}
}