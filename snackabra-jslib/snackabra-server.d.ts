declare const _default: {
    fetch(request: Request, env: any, ctx: any): Promise<Response>;
};
export default _default;
export declare class ChatRoomAPI {
    storage: any;
    env: any;
    sessions: never[];
    lastTimestamp: number;
    room_id: string;
    room_owner: string;
    room_capacity: number;
    visitors: never[];
    ownerUnread: number;
    locked: boolean;
    encryptionKey: null;
    lockedKeys: {};
    join_requests: never[];
    accepted_requests: never[];
    motd: string;
    verified_guest: string;
    signKey: null;
    storageLimit: number;
    ledgerKey: null;
    deviceIds: never[];
    claimIat: number;
    notificationToken: {};
    personalRoom: boolean;
    constructor(state: any, env: any);
    initialize(room_id: any): Promise<void>;
    fetch(request: any): Promise<Response>;
    handleSession(webSocket: any, ip: any): Promise<void>;
    broadcast(message: any): void;
    handleOldMessages(request: any): Promise<Response>;
    getKey(type: any): Promise<any>;
    postPubKey(request: any): Promise<Response>;
    handleRoomCapacityChange(request: any): Promise<Response>;
    getRoomCapacity(request: any): Promise<Response>;
    getOwnerUnreadMessages(request: any): Promise<Response>;
    getPubKeys(request: any): Promise<Response>;
    acceptVisitor(request: any): Promise<Response>;
    lockRoom(request: any): Promise<Response>;
    getJoinRequests(request: any): Promise<Response>;
    isRoomLocked(request: any): Promise<Response>;
    setMOTD(request: any): Promise<Response>;
    ownerKeyRotation(request: any): Promise<Response>;
    checkRotation(_timeout: any): Promise<boolean>;
    handleNewStorage(request: any): Promise<Response>;
    handleAdminDataRequest(request: any): Promise<Response>;
    verifyCookie(request: any): Promise<boolean>;
    verifyAuthSign(request: any): Promise<boolean>;
    verifySign(secretKey: any, sign: any, contents: any): Promise<boolean>;
    sign(secretKey: any, contents: any): Promise<string | {
        error: string;
    }>;
    jwtSign(payload: any, secret: any, options: any): Promise<string>;
    _utf8ToUint8Array(str: any): Uint8Array;
    jwtParse(s: any): Uint8Array;
    jwtStringify(a: any): string;
    jwt_str2ab(str: any): ArrayBuffer;
    addNewlines(str: any): string;
    ab2str(buf: any): string;
    exportPrivateCryptoKey(key: any): Promise<string>;
    exportPublicCryptoKey(key: any): Promise<string>;
    convertToPem(keys: any): Promise<{}>;
    base64ToArrayBuffer(base64: any): ArrayBufferLike;
    arrayBufferToBase64(buffer: any): string;
    checkJsonExistence(val: any, arr: any): boolean;
    getLockedKey(val: any): any;
    areJsonKeysSame(key1: any, key2: any): boolean;
    registerDevice(request: any): Response;
    sendNotifications(dev?: boolean): Promise<void>;
    downloadAllData(request: any): Promise<Response>;
    uploadData(request: any): Promise<Response>;
    authorizeRoom(request: any): Promise<Response>;
}
