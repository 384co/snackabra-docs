[JSLib Reference Manual](../jslib2.md) / [Exports](../modules.md) / SB384

# Class: SB384

## Hierarchy

- **`SB384`**

  ↳ [`Channel`](Channel.md)

## Table of contents

### Constructors

- [constructor](SB384.md#constructor)

### Properties

- [ready](SB384.md#ready)
- [sb384Ready](SB384.md#sb384ready)

### Accessors

- [\_id](SB384.md#_id)
- [exportable\_privateKey](SB384.md#exportable_privatekey)
- [exportable\_pubKey](SB384.md#exportable_pubkey)
- [ownerChannelId](SB384.md#ownerchannelid)
- [privateKey](SB384.md#privatekey)
- [readyFlag](SB384.md#readyflag)

## Constructors

### constructor

• **new SB384**(`key?`)

Basic (core) capability object in SB.

Note that all the getters below will throw an exception if the
corresponding information is not ready.

Like most SB classes, SB384 follows the "ready template" design
pattern: the object is immediately available upon creation,
but isn't "ready" until it says it's ready. See `Channel Class`_
example below. Also see Design Note [4]_.

[https://snackabra.io/jslib.html#dn-004-the-ready-pattern](https://snackabra.io/jslib.html#dn-004-the-ready-pattern)

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `key?` | `JsonWebKey` | a jwk with which to create identity; if not provided, it will 'mint' (generate) them randomly, in other words it will default to creating a new identity ("384"). |

## Properties

### ready

• **ready**: `Promise`<[`SB384`](SB384.md)\>

___

### sb384Ready

• **sb384Ready**: `Promise`<[`SB384`](SB384.md)\>

## Accessors

### \_id

• `get` **_id**(): `string`

#### Returns

`string`

___

### exportable\_privateKey

• `get` **exportable_privateKey**(): `JsonWebKey`

#### Returns

`JsonWebKey`

___

### exportable\_pubKey

• `get` **exportable_pubKey**(): `JsonWebKey`

#### Returns

`JsonWebKey`

___

### ownerChannelId

• `get` **ownerChannelId**(): `string`

#### Returns

`string`

___

### privateKey

• `get` **privateKey**(): `CryptoKey`

#### Returns

`CryptoKey`

___

### readyFlag

• `get` **readyFlag**(): `boolean`

#### Returns

`boolean`
